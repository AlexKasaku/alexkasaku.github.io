<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kasaku</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kasaku.co.uk/"/>
  <updated>2018-03-13T22:17:59.666Z</updated>
  <id>https://www.kasaku.co.uk/</id>
  
  <author>
    <name>Kasaku Ltd.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Useful Sitecore configuration methods</title>
    <link href="https://www.kasaku.co.uk/2018/03/13/sitecore-settings/"/>
    <id>https://www.kasaku.co.uk/2018/03/13/sitecore-settings/</id>
    <published>2018-03-13T22:15:00.000Z</published>
    <updated>2018-03-13T22:17:59.666Z</updated>
    
    <content type="html"><![CDATA[<p>Just a short blog post today to touch on a couple of useful helper methods that Sitecore provides that are easily overlooked.<br><a id="more"></a></p>
<p>You have likely used the following method for reading out a setting from a Sitecore configuration file:</p>
<p><code>Sitecore.Configuration.Settings.GetSetting(&quot;StringSetting&quot;, &quot;defaultValue&quot;);</code></p>
<p>It’s worth knowing that you usually don’t need to manually parse values from configuration settings, as there’s a few other methods here that will do that for you:</p>
<p><code>Sitecore.Configuration.Settings.GetBoolSetting(&quot;BoolSetting&quot;, true);</code><br><code>Sitecore.Configuration.Settings.GetIntSetting(&quot;IntSetting&quot;, 5);</code><br><code>Sitecore.Configuration.Settings.GetDoubleSetting(&quot;DoubleSetting&quot;, 5.00m);</code><br><code>Sitecore.Configuration.Settings.GetLongSetting(&quot;LongSetting&quot;, 5);</code></p>
<p>These are just small wrappers around some simple parsing logic, but they’re handy nonetheless. Each variant allows you to specify a correctly-typed default value that will be returned if the setting doesn’t exist, or if it fails to parse.</p>
<p>As well as these, there’s a more interesting option! Have you ever needed to store a time-based setting in configuration? Did you end up storing it as a numeric value and calling your setting <code>TimeoutSeconds</code> or <code>DelayInMinutes</code>? Well thanks to the following method, you can have a little more flexibility in values that represent spans of time:</p>
<p><code>Sitecore.Configuration.Settings.GetTimeSpanSetting(&quot;TimeSpanSetting&quot;, TimeSpan.FromMinutes(5))</code></p>
<p>This method makes use of <code>DateUtils.ParseTimeSpan</code> to parse the string value as a <code>TimeSpan</code>, allowing for you to have a more varied and readable string. Here are some example values you can use:</p>
<p><code>d.hh:mm:ss</code><br><code>0.00:00:30 - 30 seconds</code><br><code>0.00:01:30 - 1 minute, 30 seconds</code><br><code>0.10:01:30 - 10 hours, 1 minute, 30 seconds</code><br><code>3.10:01:30 - 3 days, 10 hours, 1 minute, 30 seconds</code></p>
<p>Very helpful!</p>
<p>There’s also <code>GetFileSetting</code>, which simply reads the value as a string and feeds the result into <code>FileUtil.MapPath</code> to map the relative path to an absolute path on the server.</p>
<p>Finally, though there isn’t a <code>GetSetting</code> wrapper for it, there’s a useful string parsing helper that you can combine with the regular <code>GetSetting</code> method, and that’s <code>StringUtil.ParseSizeString</code>. This takes a string representing a file size, and returns the value as a long representing the same size as a number of bytes. Here are some examples:</p>
<p><code>StringUtil.ParseSizeString(&quot;100KB&quot;) // = 102400 bytes</code><br><code>StringUtil.ParseSizeString(&quot;100MB&quot;) // = 104857600 bytes</code><br><code>StringUtil.ParseSizeString(&quot;100GB&quot;) // = 107374182400 bytes</code></p>
<p>Like with <code>GetTimeSpanSetting</code>, this lets you store your configuration values as more flexible and readable strings. After all, it’s much quicker to read <code>100MB</code> than <code>104857600</code> and know what the resulting file size will be.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just a short blog post today to touch on a couple of useful helper methods that Sitecore provides that are easily overlooked.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title>Updating rendering placeholders using Sitecore PowerShell Extensions</title>
    <link href="https://www.kasaku.co.uk/2018/02/28/updating-rendering-placeholders/"/>
    <id>https://www.kasaku.co.uk/2018/02/28/updating-rendering-placeholders/</id>
    <published>2018-02-28T10:00:00.000Z</published>
    <updated>2018-03-13T19:29:39.410Z</updated>
    
    <content type="html"><![CDATA[<p>Just a short blog post today to share a Sitecore PowerShell script that I’ve recently found useful.<br><a id="more"></a><br>On a recent project, we took the decision to rework how we had been using placeholders across the site. This involved retiring a large number of placeholders that were currently in use, and replacing these with a much smaller set. Whilst everyone recognised the need to do this, the appetite for the work involved in updating the existing content was slim.</p>
<p>Fortunately, this sort of grunt work is just what SPE is perfect for. It didn’t take long to put a script together, and within minutes all of the content was updated. I’m sharing it in this post in case someone else finds it useful.</p>
<p>In our situation, we needed something that would process content items, find renderings that were on placeholder <em>X</em> and then update these to set the placeholder as <em>Y</em>. We also wanted to make sure that renderings on placeholders <em>within</em> those renderings were also catered for (e.g. a rendering on placeholder <em>X/A</em> would translate to <em>Y/A</em>). Further to this, we actually had a number of placeholder “mappings” such as this that we wanted updating all in one go.</p>
<p>This is the script that fixed the content:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$placeholderMappings</span> = @(</div><div class="line"> @(<span class="string">"/old-placeholder"</span>,<span class="string">"/new-placeholder"</span>),</div><div class="line"> @(<span class="string">"/another-old-placeholder"</span>,<span class="string">"/new-placeholder"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="variable">$rootItem</span> = <span class="built_in">Get-Item</span> -Path master:/sitecore/content/Home</div><div class="line"><span class="variable">$defaultLayout</span> = Get-LayoutDevice <span class="string">"Default"</span></div><div class="line"></div><div class="line"><span class="comment"># Toggle for whether to update Shared or Final Layout</span></div><div class="line"><span class="variable">$useFinalLayout</span> = <span class="literal">$True</span></div><div class="line"></div><div class="line"><span class="comment"># If set to true, the script will only list the renderings that need fixing, rather than fixing them.</span></div><div class="line"><span class="variable">$reportOnly</span> = <span class="literal">$False</span></div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ( <span class="variable">$item</span> <span class="keyword">in</span> <span class="built_in">Get-ChildItem</span> -Item <span class="variable">$rootItem</span> -Recurse )</div><div class="line">&#123;</div><div class="line">    <span class="comment"># Only interested in items that have a layout</span></div><div class="line">    <span class="keyword">if</span> (Get-Layout <span class="variable">$item</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span>( <span class="variable">$mapping</span> <span class="keyword">in</span> <span class="variable">$placeholderMappings</span> )</div><div class="line">        &#123;</div><div class="line">            <span class="comment"># Get renderings in this item that have renderings in the placeholder we want to update </span></div><div class="line">            <span class="variable">$renderings</span> =  Get-Rendering -Item <span class="variable">$item</span> -Placeholder (<span class="variable">$mapping</span>[<span class="number">0</span>] + <span class="string">'/*'</span>) -Device <span class="variable">$defaultLayout</span> -FinalLayout:<span class="variable">$useFinalLayout</span></div><div class="line">            </div><div class="line">            <span class="keyword">foreach</span> ( <span class="variable">$rendering</span> <span class="keyword">in</span> <span class="variable">$renderings</span> )</div><div class="line">            &#123;</div><div class="line">                <span class="comment"># Only update the rendering if we're not in "Report Only" mode</span></div><div class="line">                <span class="keyword">if</span> (!<span class="variable">$reportOnly</span>)</div><div class="line">                &#123;</div><div class="line">                   <span class="comment"># Update the placeholder in the rendering and set it back in the item</span></div><div class="line">                   <span class="variable">$rendering</span>.Placeholder = <span class="variable">$rendering</span>.Placeholder <span class="nomarkup">-replace</span> <span class="variable">$mapping</span>[<span class="number">0</span>], <span class="variable">$mapping</span>[<span class="number">1</span>]</div><div class="line">                   Set-Rendering -Item <span class="variable">$item</span> -Instance <span class="variable">$rendering</span> -FinalLayout:<span class="variable">$useFinalLayout</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="built_in">Write-Host</span> <span class="string">"$(<span class="variable">$item</span>.FullPath) - Rendering $(<span class="variable">$rendering</span>.UniqueID) - Placeholder: $(<span class="variable">$mapping</span>[0]) --&gt; $(<span class="variable">$mapping</span>[1])"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s all there is to it. The general flow of the script is:</p>
<ul>
<li>Recurse through all items with layouts in the content folder specified</li>
<li>For each placeholder mapping specified:<ul>
<li>Get any renderings that match the old placeholder (an exact match or ones that begin with it)</li>
<li>Replace the old placeholder with the new one</li>
<li>Set the rendering back into the item</li>
</ul>
</li>
</ul>
<p>There are two variables you can tweak in the script: one for determining whether to update the Shared or Final Layout, and the other to run the script in “Report Mode” where it will just find items that require changes, without actually going ahead and making the update.</p>
<p>I hope that proves useful to someone!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just a short blog post today to share a Sitecore PowerShell script that I’ve recently found useful.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-powershell-extensions" scheme="https://www.kasaku.co.uk/tags/sitecore-powershell-extensions/"/>
    
      <category term="powershell" scheme="https://www.kasaku.co.uk/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>Virtual Users, custom properties and persisting data</title>
    <link href="https://www.kasaku.co.uk/2017/11/22/virtual-user-custom-properties/"/>
    <id>https://www.kasaku.co.uk/2017/11/22/virtual-user-custom-properties/</id>
    <published>2017-11-22T12:00:00.000Z</published>
    <updated>2017-11-22T16:36:18.447Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve seen a few questions recently regarding Virtual Users within Sitecore and asking how their data is persisted (if it is at all), so I thought I’d try to clear up any confusion around this.<br><a id="more"></a></p>
<h1 id="What-are-virtual-users"><a href="#What-are-virtual-users" class="headerlink" title="What are virtual users?"></a>What are virtual users?</h1><p>A Virtual User within Sitecore is a transient entity used to represent an authenticated user on your site, unlike a regular user that is persisted within the Sitecore Core database (by default!). A common use-case for this scenario would be if you are using an external system for authentication. A Virtual User allows you to create an authenticated session for that user, without needing to create them in Sitecore. They don’t get fully persisted, and you won’t see them in the User Mananger. However, Sitecore treats them like any other user when it comes to roles + access rules. You’re even able to specify custom properties for virtual users.</p>
<p>Logging in a Virtual User is very straightforward. Here is a typical example for creating a new Virtual User and setting some roles + properties:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">User virtualUser = Sitecore.Security.Authentication.AuthenticationManager.BuildVirtualUser(<span class="string">"extranet\\bertie@bassett.co.uk"</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// Optional: Add the user to an existing extranet role</span></div><div class="line">virtualUser.Roles.Add(Sitecore.Security.Accounts.Role.FromName(<span class="string">"extranet\\CustomRole"</span>));</div><div class="line"></div><div class="line"><span class="comment">// Optional: Set some custom properties</span></div><div class="line">virtualUser.Profile.FullName = <span class="string">"Bertie Bassett"</span>;</div><div class="line">virtualUser.Profile.Email = <span class="string">"bertie@bassett.co.uk"</span>;</div><div class="line">virtualUser.Profile.SetCustomProperty(<span class="string">"DateOfBirth"</span>, <span class="string">"1980-01-01"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Login the virtual user</span></div><div class="line">Sitecore.Security.Authentication.AuthenticationManager.LoginVirtualUser(virtualUser);</div></pre></td></tr></table></figure>
<p>After the <code>LoginVirtualUser</code> is called, an authenticated session is established and on future page requests, the <code>Sitecore.Context.User</code> will be <code>extranet\bertie@bassett.co.uk</code>.</p>
<h1 id="How-is-the-user-authenticated"><a href="#How-is-the-user-authenticated" class="headerlink" title="How is the user authenticated?"></a>How is the user authenticated?</h1><p>A Virtual User is often referred to as an “in-memory” user, suggesting that the user data is held within memory and won’t survive a server restart. This isn’t really true, as we’ll see.</p>
<p>If you are using Forms Authentication, when the <code>LoginVirtualUser</code> method is called, a standard Forms Authentication cookie is created. By default, this has the name <code>.ASPXAUTH</code>, and will have an encrypted value such as this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2B84953608A213A6D644F37F4723DCA1DC7CF534DCA0214342B00C8751AD667FC2FCA31E043074EC74C8AFC69EA7012DA9A70B622D011FA029632A09E8ED20B1906DE1FE4E597F96E547126ADF93867888EF34A64383E6870517559A5779A861B9F77ADC5EE3FE52B9FE15554B70C7F36C2A88A2B96484A3C5171DF174CC3CDD3EDC63D88C798886045E20B2B95FA40734D533C3AC9FAC76BF07C3397B4889E06F9FB4B3279506F2D2F26083024B5514310B4EEE</div></pre></td></tr></table></figure>
<p>During an HTTP request, this data is decrypted into a <code>FormsAuthenticationTicket</code>. In this demo instance, it contains the following data:  </p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"Name"</span>: <span class="string">"extranet\\bertie@bassett.co.uk"</span>,</div><div class="line">  <span class="attr">"Expiration"</span>: <span class="string">"2017-11-22T12:16:29.5653712+00:00"</span>,</div><div class="line">  <span class="attr">"IssueDate"</span>: <span class="string">"2017-11-22T11:46:29.5653712+00:00"</span>,</div><div class="line">  <span class="attr">"IsPersistent"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"Expired"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"UserData"</span>: <span class="string">"cj5qfethsr0z4ej1xjxkh4ox"</span>,</div><div class="line">  <span class="attr">"CookiePath"</span>: <span class="string">"/"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This ticket alone is enough for Sitecore to consider the user authenticated as the specified user and allow access to any pages you may have set as restricted to anonymous users.</p>
<h1 id="What-about-roles-and-properties"><a href="#What-about-roles-and-properties" class="headerlink" title="What about roles and properties?"></a>What about roles and properties?</h1><p>In the above code example, we added the virtual user into the <code>extranet\CustomRole</code> role and also added some profile properties. As you can see, this information isn’t found within the ticket. So where is it? Well, note that there is a <code>UserData</code> property which contains a string, <code>cj5qfethsr0z4ej1xjxkh4ox</code>. That’s important.</p>
<p>If I take a look at the <code>Core</code> database for this instance, I find the following row in the <code>ClientData</code> table:</p>
<p><img src="/2017/11/22/virtual-user-custom-properties/sql.png" title="ClientData Result"></p>

<p>The value of <code>SessionKey</code> field refers to both the current ASP.NET Session ID and also the <code>UserData</code> value from the authentication ticket. The <code>Data</code> field is a Base64 encoding of a serialized <code>Hashtable</code> object. Within <em>that</em>, is a serialized instance of a <code>Sitecore.SecurityModel.UserRuntimeSetings</code> object that contains all of the Virtual User data, such as the roles they belong to, and their custom properties.</p>
<p>So as you can see, data <em>is</em> persisted for the Virtual User. Additionally, as the cookie is persisted on the user’s machine, the authenticated user and their data will survive a restart of the web process / server. If you have multiple load-balanced servers referencing the same <code>Core</code> database, then the Virtual User data will be available to each server, avoiding any load-balancing issues in this particular scenario.</p>
<p>It’s worth noting that this data survives if the ASP.NET Session ID is abandoned. In this instance, the session cookie is removed, but the authentication cookie remains. As this authentication cookie still retains the key within the <code>UserData</code> property, the data can still be pulled out of the <code>Core</code> database.</p>
<h1 id="ClientData-compacting"><a href="#ClientData-compacting" class="headerlink" title="ClientData compacting"></a>ClientData compacting</h1><p>You should note that the <code>ClientData</code> table <em>does</em> get cleaned up on a regular basis. There is an agent responsible for this, and that executes every 4 hours by default:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">scheduling</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">agent</span> <span class="attr">type</span>=<span class="string">"Sitecore.Tasks.CompactClientDataAgent"</span> <span class="attr">method</span>=<span class="string">"Run"</span> <span class="attr">interval</span>=<span class="string">"04:00:00"</span>/&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">scheduling</span>&gt;</span></div></pre></td></tr></table></figure>
<p>This uses a parameter of the ClientData configuration to determine the <code>object lifetime</code>, which defaults to 20 minutes. Any rows which have not been accessed within that time in the table will be removed when the agent executes:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">clientDataStore</span> <span class="attr">type</span>=<span class="string">"Sitecore.Data.SqlServer.SqlServerClientDataStore, Sitecore.Kernel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">desc</span>=<span class="string">"connection string name"</span> <span class="attr">connectionStringName</span>=<span class="string">"core"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">desc</span>=<span class="string">"object lifetime"</span>&gt;</span>00:20:00<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">ref</span>=<span class="string">"eventing/eventQueueProvider/eventQueue[@name='core']"</span> <span class="attr">desc</span>=<span class="string">"event queue"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">type</span>=<span class="string">"Sitecore.Abstractions.BaseEventManager, Sitecore.Kernel"</span> <span class="attr">desc</span>=<span class="string">"eventManager"</span> <span class="attr">resolve</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">clientDataStore</span>&gt;</span></div></pre></td></tr></table></figure>
<p>So, without changes to this, you shouldn’t treat this storage of Virtual User data as a permenant. But then, it’s not intended to be - generally this would be storage of data you’re only interested in keeping for the duration of the user’s session. If you need something more than this you should look into an alternate method.</p>
<h1 id="So…-ClientData-Is-that-new"><a href="#So…-ClientData-Is-that-new" class="headerlink" title="So… ClientData? Is that new?"></a>So… ClientData? Is that new?</h1><p>The ClientData table has actually been within the Sitecore database for quite some time now, but the use of it to persist Virtual User information is relatively recent. In fact, it was introduced in <code>Sitecore 8.1 rev. 160302 (8.1 Update-2)</code>.</p>
<p>So what happened before then? Well, in earlier versions of Sitecore, the user profile data was actually stored entirely within the authentication cookie:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"Name"</span>: <span class="string">"extranet\\bertie@bassett.co.uk"</span>,</div><div class="line">  <span class="attr">"Expiration"</span>: <span class="string">"2017-11-22T15:39:04.9367692+00:00"</span>,</div><div class="line">  <span class="attr">"IssueDate"</span>: <span class="string">"2017-11-22T15:09:04.9367692+00:00"</span>,</div><div class="line">  <span class="attr">"IsPersistent"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"Expired"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"UserData"</span>: <span class="string">"[&#123;\"Key\":\"SC_USR_extranet\\\\bertie@bassett.co.ukRuntimeSettings\",\"Value\":\"&#123;\\\"AddedRoles\\\":[\\\"extranet\\\\\\\\CustomRole\\\"],\\\"IsAdministrator\\\":false,\\\"IsVirtual\\\":true,\\\"Properties\\\":[&#123;\\\"Key\\\":\\\"SerializedData\\\",\\\"Value\\\":\\\"[&#123;\\\\\\\"Key\\\\\\\":\\\\\\\"DateOfBirth\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"1980-01-01\\\\\\\"&#125;]\\\"&#125;,&#123;\\\"Key\\\":\\\"Email\\\",\\\"Value\\\":\\\"bertie@bassett.co.uk\\\"&#125;,&#123;\\\"Key\\\":\\\"FullName\\\",\\\"Value\\\":\\\"Bertie Bassett\\\"&#125;],\\\"RemovedRoles\\\":[]&#125;\"&#125;]"</span>,</div><div class="line">  <span class="attr">"CookiePath"</span>: <span class="string">"/"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So, prior to Sitecore 8.1 Update 2, there was no dependency on the <code>Core</code> database for storing Virtual User profile data. As long as the cookie is in place, the Virtual User would be correctly restored.</p>
<h1 id="Further-information"><a href="#Further-information" class="headerlink" title="Further information"></a>Further information</h1><p>That’s what I’ve found from my short dive into Virtual User operations. If you think I’ve stated anything inaccurate, please let me know! I’m going to be looking at this further and into any other common questions around Virtual Users that I see, so if needed I’ll provide a follow-up post with more detail.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve seen a few questions recently regarding Virtual Users within Sitecore and asking how their data is persisted (if it is at all), so I thought I’d try to clear up any confusion around this.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title>Sitecore 9 + xConnect: Blog round-up and known issues</title>
    <link href="https://www.kasaku.co.uk/2017/11/21/sitecore-xconnect-round-up/"/>
    <id>https://www.kasaku.co.uk/2017/11/21/sitecore-xconnect-round-up/</id>
    <published>2017-11-21T12:00:00.000Z</published>
    <updated>2017-11-21T14:48:36.093Z</updated>
    
    <content type="html"><![CDATA[<p>Now that Sitecore 9.0 has been out in the wild for a while, and after having spent time with both it and xConnect, I thought I’d create a post to round-up some things of note.<br><a id="more"></a></p>
<h1 id="Sitecore-9-0"><a href="#Sitecore-9-0" class="headerlink" title="Sitecore 9.0"></a>Sitecore 9.0</h1><p>First, just to touch on Sitecore 9.0 in general. There are already some great resources available, created by Sitecore and the community to get you up to speed:</p>
<ul>
<li>The official <a href="https://doc.sitecore.net/developers/index.html" target="_blank" rel="noopener">Sitecore Developer documentation</a></li>
<li><a href="https://jammykam.wordpress.com/" target="_blank" rel="noopener">Kamruz Jaman</a>, aka jammykam, provides a good overview of the new features in his blog post - <a href="https://jammykam.wordpress.com/2017/10/17/sitecore-9-is-here/" target="_blank" rel="noopener">Sitecore 9 is here!</a>. He’s also created blogged specifically about the new <a href="https://jammykam.wordpress.com/2017/11/01/sitecore-9-custom-config-roles/" target="_blank" rel="noopener">custom configuration roles</a> and <a href="https://jammykam.wordpress.com/2017/10/17/sitecore-9-dynamic-placeholders/" target="_blank" rel="noopener">dynamic placeholders</a></li>
</ul>
<p>Installations in Sitecore 9.0 have become a little more complicated, and there’s a bit more to get used to, especially when it comes to setting up your own development environment. The following blog posts provide some good pointers and scripts to get you going faster:</p>
<ul>
<li><a href="http://blog.baslijten.com/gotchas-while-installing-sitecore-9-using-the-sitecore-installation-framework/" target="_blank" rel="noopener">SIF Installation gotchas</a> by <a href="http://blog.baslijten.com" target="_blank" rel="noopener">Bas Lijten</a></li>
<li><a href="https://jermdavis.wordpress.com/2017/10/30/low-effort-solr-installs/" target="_blank" rel="noopener">Low-effort SOLR installs</a> by <a href="https://jermdavis.wordpress.com" target="_blank" rel="noopener">Jeremy Davis</a></li>
<li><a href="https://kamsar.net/index.php/2017/11/The-lazy-way-to-install-Sitecore-9/" target="_blank" rel="noopener">The lazy developer’s way to install Sitecore 9</a> by <a href="https://kamsar.net" target="_blank" rel="noopener">Kam Figy</a></li>
</ul>
<p>SOLR is essentially a prerequisite for Sitecore now. If you have only been using Lucene so far, I would strongly recommend you investigate SOLR and move towards it as the norm for your projects. Fortunately, with the introduction of SIF and the new configuration roles, switching over to SOLR is much simpler than in previous versions of Sitecore.</p>
<h1 id="Introducing-xConnect"><a href="#Introducing-xConnect" class="headerlink" title="Introducing xConnect"></a>Introducing xConnect</h1><p>xConnect is a brand new concept for Sitecore 9.0, and as such you’ll want to make sure you’re up to speed on it. Rather than go into detail here on what it is and what you need to know, there are already some really good resources that have been written that I can point you to.</p>
<p>First off, there is the <a href="https://doc.sitecore.net/developers/xp/xconnect/#" target="_blank" rel="noopener">official documentation for xConnect</a>, which is chock-full of examples and guidance, so shouldn’t be overlooked.</p>
<p>Next, my man <a href="https://citizensitecore.com/author/longhorntaco/" target="_blank" rel="noopener">Jason Wilkerson</a>, aka longhorntaco, has created <a href="https://citizensitecore.com/2017/10/17/introducing-xconnect-for-sitecore-9/" target="_blank" rel="noopener">a fantastic series of blog posts introducing xConnect</a> and also provides sample code for getting your first xConnect client running and pushing interactions into xDb. All the example code is included on <a href="https://github.com/LonghornTaco/xconnect-intro" target="_blank" rel="noopener">GitHub</a> too, nice!</p>
<h1 id="Known-xConnect-issues"><a href="#Known-xConnect-issues" class="headerlink" title="Known xConnect issues"></a>Known xConnect issues</h1><h2 id="Interactions-bug"><a href="#Interactions-bug" class="headerlink" title="Interactions bug"></a>Interactions bug</h2><p>There is currently an outstanding bug relating to tracking interactions from a non-Sitecore xConnect client. When these interactions are added to a  contact, they will then cause an error to be shown when the Experience Profile is used to view that contact:</p>
<p><img src="/2017/11/21/sitecore-xconnect-round-up/profile-visits-error.png" title="Experience profile visits error"></p>

<p>Along with seeing this error, you’ll also have the following error logged:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">15516 18:30:09 ERROR Object reference not set to an instance of an object.</div><div class="line">Exception: System.NullReferenceException</div><div class="line">Message: Object reference not set to an instance of an object.</div><div class="line">Source: Sitecore.Cintel</div><div class="line">   at Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations.FillTableWithRow(DataTable rawTable, Interaction curInteraction, Int32 index)</div><div class="line">   at Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations.GetTableFromContactXconnect(DataTable rawTable, Guid contactID, Nullable`1 interactionID)</div><div class="line">   at Sitecore.Cintel.Reporting.ReportingServerDatasource.Visits.GetVisitsWithLocations.Process(ReportProcessorArgs args)</div><div class="line">   at (Object , Object[] )</div><div class="line">   at Sitecore.Pipelines.CorePipeline.Run(PipelineArgs args)</div><div class="line">   at Sitecore.Cintel.Reporting.PipelineViewProvider.GenerateContactView(ViewParameters viewParameters)</div><div class="line">   at Sitecore.Cintel.Endpoint.IntelController.Get(ViewParameters viewParams, Guid contactId, String viewId, String id)</div></pre></td></tr></table></figure>
<p>The issue occurs due to the interactions from an xConnect client not supplying all of the facets that a typical web visit interaction does, such as User Agent + IP info. The code that executes within the Experience Profile to render visit data expects these facets to be populated.</p>
<p>This issue is already known to Sitecore, and is listed on the <a href="https://kb.sitecore.net/articles/125044" target="_blank" rel="noopener">Sitecore 9.0 Known Issues page</a>:</p>
<blockquote>
<p>The Experience Profile currently only supports website visit interactions. As a result, if an interaction does not fully populate the facets required for a web visit, an error is displayed.</p>
</blockquote>
<p>There are however, a couple of workarounds you can put in place to fix this issue. These involve either:</p>
<ul>
<li>Providing data for these additional facets with your interactions from your xConnect client</li>
<li>Patching the report code so that it allows for this data to be missing</li>
</ul>
<p>This would be worth a blog post on its own, but fortunately, there is already <a href="https://www.brimit.com/blog/sitecore-9-experience-profile-workaround" target="_blank" rel="noopener">a great post covering how to implement these workarounds</a>.</p>
<h2 id="Experience-Profile-dashboard-filter-bug"><a href="#Experience-Profile-dashboard-filter-bug" class="headerlink" title="Experience Profile dashboard filter bug"></a>Experience Profile dashboard filter bug</h2><p>Additionally, you may notice that within the Experience Profile, the default search dashboard doesn’t seem to show any results, even if you know there are contacts present:</p>
<p><img src="/2017/11/21/sitecore-xconnect-round-up/xp-no-results.png" title="Experience Profile showing no results"></p>

<p>This is due to another Known Issue in Sitecore:</p>
<blockquote>
<p>The To date field must be filled in to see search results. This field is hidden by default and you must select the Filter button to enable it. (187153)</p>
</blockquote>
<p>To workaround this for now, you need to open up the filter and make sure the <em>To Date</em> field is set to a value that covers an interaction for your contact:</p>
<p><img src="/2017/11/21/sitecore-xconnect-round-up/xp-filter.png" title="Applying a filter to the Experience Profile search"></p>

<p>With this in place, you should see that the contacts start appearing.</p>
<h1 id="Questions-Don’t-forget-StackExchange"><a href="#Questions-Don’t-forget-StackExchange" class="headerlink" title="Questions? Don’t forget StackExchange"></a>Questions? Don’t forget StackExchange</h1><p>Still facing an issue relating to Sitecore 9.0 or xConnect that no one has yet covered? The <a href="https://sitecore.stackexchange.com" target="_blank" rel="noopener">Sitecore StackExchange</a> is, as ever, the no. 1 resource for questions + answers relating to all things Sitecore. Questions can be tagged, so it’s worth browsing <a href="https://sitecore.stackexchange.com/questions/tagged/xconnect" target="_blank" rel="noopener">the xConnect questions</a> to see if someone is encountering the same problem as you.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Now that Sitecore 9.0 has been out in the wild for a while, and after having spent time with both it and xConnect, I thought I’d create a post to round-up some things of note.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="bugs" scheme="https://www.kasaku.co.uk/tags/bugs/"/>
    
      <category term="sitecore-9" scheme="https://www.kasaku.co.uk/tags/sitecore-9/"/>
    
      <category term="xconnect" scheme="https://www.kasaku.co.uk/tags/xconnect/"/>
    
  </entry>
  
  <entry>
    <title>Shard map manager has to be configured error in Sitecore xConnect</title>
    <link href="https://www.kasaku.co.uk/2017/11/05/sitecore-xconnect-shard-map-must-be-configured/"/>
    <id>https://www.kasaku.co.uk/2017/11/05/sitecore-xconnect-shard-map-must-be-configured/</id>
    <published>2017-11-05T12:00:00.000Z</published>
    <updated>2017-11-21T13:15:27.540Z</updated>
    
    <content type="html"><![CDATA[<p>After configuring Sitecore 9 and xConnect, you may come across the following error in the xConnect logs when you’re trying to use the API:<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">2017-10-29 21:23:30.052 +00:00 [Error] [&quot;XdbContextLoggingPlugin&quot;] XdbContext Batch Execution Exception</div><div class="line">Sitecore.XConnect.Operations.DependencyFailedException: One or more dependencies failed ---&gt; </div><div class="line">Sitecore.Xdb.Collection.Failures.DataProviderException: Postcondition &apos;The shard map manager has to be configured.&apos; failed. ---&gt;</div><div class="line">Sitecore.Framework.Conditions.PostconditionException: Postcondition &apos;The shard map manager has to be configured.&apos; failed.</div><div class="line">   at Sitecore.Framework.Conditions.EnsuresValidator`1.ThrowExceptionCore(String condition, String additionalMessage, ConstraintViolationType type)</div><div class="line">   at Sitecore.Framework.Conditions.Throw.ValueShouldBeTrue[T](ConditionValidator`1 validator, String conditionDescription)</div><div class="line">   at Sitecore.Xdb.Collection.Data.SqlServer.Configuration.ElasticScaleConnectionManager.InitializeShardMapManager()</div><div class="line">   at Sitecore.Xdb.Collection.Data.SqlServer.Configuration.ElasticScaleConnectionManager.get_ShardMapManager()</div><div class="line">   at Sitecore.Xdb.Collection.Data.SqlServer.Configuration.ElasticScaleConnectionManager.GetRangeShardMap(String rangeShardMapName)</div><div class="line">   at Sitecore.Xdb.Collection.Data.SqlServer.Configuration.ElasticScaleConnectionManager.&lt;&gt;c__DisplayClass37_0.&lt;GetRangeMappings&gt;b__0()</div><div class="line">   at System.Lazy`1.CreateValue()</div><div class="line">   at System.Lazy`1.LazyInitValue()</div><div class="line">   at Sitecore.Xdb.Collection.Data.SqlServer.Configuration.MemoryCacheManager.AddOrGetExistingFromCache[T](String key, Func`1 valueFactory)</div><div class="line">   at Sitecore.Xdb.Collection.Data.SqlServer.Configuration.ElasticScaleConnectionManager.MapRecordsToShards[T](String rangeShardMapName, IReadOnlyCollection`1 records, Func`2 getShardKey)</div><div class="line">   at Sitecore.Xdb.Collection.Data.SqlServer.Managers.SqlContactRecordsManager.&lt;GetContactIdentifiersFromIndexAsync&gt;d__5.MoveNext()</div></pre></td></tr></table></figure>
<p>Despite the slightly cryptic error message, the cause of this is actually fairly straightforward. If you see this error, this is an indicator that xConnect cannot connect to the <code>Xdb.Collection.ShardMapManager</code> database, which is attempted in the <code>InitializeShardMapManager</code> method, where this exception is being thrown.</p>
<p>Though the underlying SQL error doesn’t appear to be logged, to diagnose the problem, you should confirm that the <code>collection</code> connection string in the configuration is correct:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"collection"</span> <span class="attr">connectionString</span>=<span class="string">"user id=collectionuser;password=***PASSWORD***;data source=localhost;Initial Catalog=sc90_Xdb.Collection.ShardMapManager"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>In my instance, the Sitecore 9 install hadn’t correctly created the <code>collectionuser</code> login in SQL Server, so I just had to create this login and add it to the <code>sc90_Xdb.Collection.ShardMapManager</code> database. I confirmed that the connection string worked and provided access to the ShardMapManager database, and after that point, the error disappeared and I was able to push data into xConnect.</p>
<p>This error occurs if the post-installation manual steps are not completed. For Sitecore 9.0, these are found in Chapter 6 of the installation guide.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After configuring Sitecore 9 and xConnect, you may come across the following error in the xConnect logs when you’re trying to use the API:&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="bugs" scheme="https://www.kasaku.co.uk/tags/bugs/"/>
    
      <category term="sitecore-9" scheme="https://www.kasaku.co.uk/tags/sitecore-9/"/>
    
      <category term="xconnect" scheme="https://www.kasaku.co.uk/tags/xconnect/"/>
    
  </entry>
  
  <entry>
    <title>Storing data in the user profile in Sitecore PowerShell Extensions</title>
    <link href="https://www.kasaku.co.uk/2017/07/19/sitecore-powershell-storing-in-user-profile/"/>
    <id>https://www.kasaku.co.uk/2017/07/19/sitecore-powershell-storing-in-user-profile/</id>
    <published>2017-07-19T11:00:00.000Z</published>
    <updated>2017-11-05T16:04:49.289Z</updated>
    
    <content type="html"><![CDATA[<p>Sitecore PowerShell Extensions has a very powerful dialog feature that allows scripts to be written that create dialogs for capturing information from the user.<br><a id="more"></a><br>This feature is used by a great deal of the scripts that come bundled with SPE, such as the broken links report:</p>
<p><img src="/2017/07/19/sitecore-powershell-storing-in-user-profile/spe_brokenlinks.png" title="Broken links dialog"></p>

<p>And the package generator:</p>
<p><img src="/2017/07/19/sitecore-powershell-storing-in-user-profile/spe_pkg.png" title="Package generator dialog"></p>

<p>If you have a script featuring a dialog that you regularly execute, you might want to have your most recently used values saved, so that next time you execute the script you can skip through the dialog. Fortunately, this is actually quite easy to accomplish.</p>
<h1 id="Using-the-User-Profile"><a href="#Using-the-User-Profile" class="headerlink" title="Using the User Profile"></a>Using the User Profile</h1><p>There are a number of different locations you could use to persist this data. Assuming you wish to save the values on a per-user basis, one of the easiest methods is to use the <a href="https://msdn.microsoft.com/en-us/library/2y3fs9xs.aspx" target="_blank" rel="noopener">ASP.NET User Profile</a>. This is part of the <a href="https://msdn.microsoft.com/en-us/library/yh26yfzy.aspx" target="_blank" rel="noopener">ASP.NET Membership Provider</a> that Sitecore’s user management is built upon. Using the profile means that the data will be stored within SQL Server and therefore persisted across multiple browser sessions and machines. Furthermore, the Sitecore API and SPE makes accessing this profile very simple.</p>
<p>Getting the current user and setting / getting a profile value from it couldn’t be simpler:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Get the current user</span></div><div class="line"><span class="variable">$user</span> = Get-User -Current </div><div class="line"></div><div class="line"><span class="comment"># Store a value</span></div><div class="line"><span class="variable">$user</span>.Profile.SetCustomProperty(<span class="string">"mycustomproperty"</span>, <span class="string">"store this please!"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Read a value</span></div><div class="line"><span class="variable">$user</span>.Profile.GetCustomProperty(<span class="string">"mycustomproperty"</span>)</div></pre></td></tr></table></figure>
<p>Straightforward, right?</p>
<h2 id="A-sample-script"><a href="#A-sample-script" class="headerlink" title="A sample script"></a>A sample script</h2><p>Let’s use the above example and apply it to a script that uses a dialog. In this example, we will show a simple dialog with a dropdown list. When the dialog is completed, the value that was selected will be stored in the current user’s profile, ready for next time:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$profileKey</span> = <span class="string">"myScript_savedOption"</span></div><div class="line"><span class="variable">$me</span> = Get-User -Current</div><div class="line"></div><div class="line"><span class="comment"># Read the last saved value from the user profile, if any.</span></div><div class="line"><span class="comment"># This will get set in the dialog as the default value.</span></div><div class="line"><span class="variable">$savedValue</span> = <span class="variable">$me</span>.Profile.GetCustomProperty(<span class="variable">$profileKey</span>)</div><div class="line"></div><div class="line"><span class="variable">$options</span> = [ordered]@&#123;</div><div class="line">    <span class="string">"Option One"</span>=<span class="string">"1"</span></div><div class="line">    <span class="string">"Option Two"</span>=<span class="string">"2"</span></div><div class="line">    <span class="string">"Option Three"</span>=<span class="string">"3"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$props</span> = @&#123;</div><div class="line">    Parameters = @(</div><div class="line">        @&#123;Name=<span class="string">"chosenOption"</span>; Title=<span class="string">"Choose an option"</span>; Options=<span class="variable">$options</span>; Value=<span class="variable">$savedValue</span>&#125;</div><div class="line">    )</div><div class="line">    Title = <span class="string">"Persistant option selector"</span></div><div class="line">    Description = <span class="string">"Choose an option, your choice will be saved for next time."</span></div><div class="line">    Width = <span class="number">300</span></div><div class="line">    Height = <span class="number">300</span></div><div class="line">    ShowHints = <span class="literal">$true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$result</span> = Read-Variable @props </div><div class="line"></div><div class="line"><span class="comment"># Only proceed if the user selected OK in the dialog.</span></div><div class="line"><span class="keyword">if</span>(<span class="variable">$result</span> <span class="nomarkup">-ne</span> <span class="string">"ok"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># Save the value in the user profile for next time</span></div><div class="line"><span class="variable">$me</span>.Profile.SetCustomProperty(<span class="variable">$profileKey</span>, <span class="variable">$chosenOption</span>)</div><div class="line"></div><div class="line"><span class="comment"># Can now proceed to use $chosenOption in the script</span></div></pre></td></tr></table></figure>
<p>If you execute the script, you will see that once you have completed the dialog once, the value you last selected is preselected for you the next time you run the script. Easy, right?</p>
]]></content>
    
    <summary type="html">
    
      Learn how to use Sitecore PowerShell Extensions to improve the usability of your scripts by storing data in the user profile.
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-powershell-extensions" scheme="https://www.kasaku.co.uk/tags/sitecore-powershell-extensions/"/>
    
      <category term="powershell" scheme="https://www.kasaku.co.uk/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>Introducing Sitecore.Sweep</title>
    <link href="https://www.kasaku.co.uk/2016/11/21/sitecore-sweep/"/>
    <id>https://www.kasaku.co.uk/2016/11/21/sitecore-sweep/</id>
    <published>2016-11-21T12:00:00.000Z</published>
    <updated>2017-07-19T13:03:14.695Z</updated>
    
    <content type="html"><![CDATA[<p>I have <a href="https://github.com/Kasaku/Sitecore.Sweep" target="_blank" rel="noopener">added to GitHub</a> a small Sitecore module that I have developed and used in a couple of projects where we wanted to maintain tight control over the HTML that is output from rich-text fields.</p>
<a id="more"></a>
<h2 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h2><p>One of the great benefits of Sitecore is that it allows you 100% control over the HTML output of your site - it doesn’t inject unwanted scripts or styles, and it doesn’t force you to conform to a certain HTML structure. However, with great power, comes great responsibility.</p>
<p>I am sure you have worked on a site that has been lovingly crafted by your UX team, beautifully imagined by designers, and expertly rendered by front-end developers, only for the site to then be gifted to content editors. At this point, using Sitecore’s standard rich-text editor, they add their own unique touch by way of tables for layouts, overriding fonts, and center-aligning text to their heart’s delight. The result is not quite the dream your team first had, or indeed, sold to the client.</p>
<p>Often, this is not the fault of the editors; content gets copy + pasted from Word (or other applications) and customized HTML comes along for the ride. And all those lovely styling buttons are right there in the editor, why not use them?</p>
<h2 id="Workarounds"><a href="#Workarounds" class="headerlink" title="Workarounds"></a>Workarounds</h2><p>Yes, there are means of tackling this in Sitecore. You can limit the functionality of the rich-text editor by removing most of the options, but Sitecore’s editor can still result in some undesirable HTML even with very few options available to the user. And yes, there are buttons there to assist in the copying of text from Word, <em>if</em> your editors remember to use them.</p>
<p>You can even go down the road of validating the HTML created and show the user an error if their HTML isn’t up to scratch. But if you’re going to that trouble, why not present a solution rather than a problem and silently tidy up the content for the user immediately? That’s what this small module, Sweep, sets out to do.</p>
<h2 id="Introducing-Sitecore-Sweep"><a href="#Introducing-Sitecore-Sweep" class="headerlink" title="Introducing Sitecore.Sweep"></a>Introducing Sitecore.Sweep</h2><p>Despite the dramatic introduction, Sweep is actually a very straight-forward and simple module. Upon the saving of an item through the UI - i.e. in Experience Editor or Content Editor - Sweep will pass the fields being saved through a pipeline that will a) determine if they need to be cleaned and b) clean them if required.</p>
<p>Determining if they need to be cleaned is down to the configuration of the module. You can configure Sweep to clean <strong>all</strong> Rich-Text fields if you desire, which is not something I have used myself, or you can take a more granular approach and only apply it to certain templates and fields.</p>
<p>The cleaning is performed by an extensible pipeline which can do as little or as much as you like. Included in the module are options for:</p>
<ul>
<li>Removing inline styling (e.g. <code>&lt;p style=&quot;margin-top:430px&quot;&gt;A lovely paragraph&lt;/p&gt;</code> –&gt; <code>&lt;p&gt;A lovely paragraph&lt;/p&gt;</code>)</li>
<li>Removing unwanted classes (supports both whitelisting + blacklisting class names)</li>
<li>Removing empty elements (e.g. <code>&lt;p&gt;&lt;/p&gt;</code>)</li>
<li>Fixing shoddy headers (e.g. <code>&lt;p&gt;&lt;strong&gt;My title!&lt;/strong&gt;&lt;/p&gt;</code> –&gt; <code>&lt;h2&gt;My title!&lt;/h2&gt;</code>)</li>
<li>Ensuring text is wrapped in a paragraph tag if no root element is found</li>
<li>Fixing nested paragraphs (e.g. <code>&lt;p&gt;&lt;p&gt;My text&lt;/p&gt;&lt;/p&gt;</code> –&gt; <code>&lt;p&gt;My text&lt;/p&gt;</code>), yes this can happen!</li>
<li>Removing non-breaking spaces, because they shouldn’t be used for spacing text.</li>
<li>Removing inner-elements from headers (e.g. <code>&lt;h1&gt;&lt;strong&gt;My strong header!&lt;/strong&gt;&lt;/h1&gt;</code> –&gt; <code>&lt;h1&gt;My strong header!&lt;/h1&gt;</code>)</li>
</ul>
<p>These are just a collection of examples that I have used in various projects. It is by no means suggested that a site should need to use all of these options, or that all of these make for Perfect HTML™. Every situation is different, and these are just some of the provided options that can be used. It is also super-easy to add your own by extending a provided processor base class.</p>
<p>This is definitely not a module for all sites, or even most sites, but I have certainly made use of it so I have added it to GitHub in case others can use it too.</p>
<h2 id="Want-to-try-it"><a href="#Want-to-try-it" class="headerlink" title="Want to try it?"></a>Want to try it?</h2><p>The <a href="https://github.com/Kasaku/Sitecore.Sweep" target="_blank" rel="noopener">module is hosted on GitHub</a>. It has also been submitted to the Sitecore Marketplace and will hopefully be published shortly.</p>
<h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>I would be very keen to hear from anyone who has tried the module and wants to provide feedback. Or if you’ve read this blog post and have any questions / comments, please comment below or message me on Sitecore Slack for a chat about it.</p>
<p>I’d especially like to hear from you if you think it’s either fundamentally flawed or can be achieved in a much better manner! </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have &lt;a href=&quot;https://github.com/Kasaku/Sitecore.Sweep&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;added to GitHub&lt;/a&gt; a small Sitecore module that I have developed and used in a couple of projects where we wanted to maintain tight control over the HTML that is output from rich-text fields.&lt;/p&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="projects" scheme="https://www.kasaku.co.uk/tags/projects/"/>
    
  </entry>
  
  <entry>
    <title>Developer role error in Sitecore 8.1</title>
    <link href="https://www.kasaku.co.uk/2016/10/26/developer-role-error-in-sitecore-8-1/"/>
    <id>https://www.kasaku.co.uk/2016/10/26/developer-role-error-in-sitecore-8-1/</id>
    <published>2016-10-26T22:00:00.000Z</published>
    <updated>2017-07-19T13:03:14.694Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I discovered an issue with the Developer user role in Sitecore 8.1.3. Though it has been fixed in Sitecore 8.2, it might catch you out if you haven’t upgraded yet.</p>
<a id="more"></a>
<p>Sitecore includes a Developer security role that can be assigned to users. This role includes both the Author and Designer roles, as well as adding further permissions. The full description supplied by Sitecore is:</p>
<blockquote>
<p>Gives the user access to content manipulation facilities in the Content Editor, plus all the design and authoring roles normally used by client authors and client designers. It also provides access to more functionality on the ribbon of the Content Editor to allow full development features for users assigned to this role.</p>
</blockquote>
<p>This role also has access to the Development Tools menu in the Sitecore menu, which gives the user access to further development tools, such as  the Package Designer.</p>
<p>For a full description of the security roles within Sitecore, <a href="https://doc.sitecore.net/sitecore_experience_platform/setting_up__maintaining/security_and_administration/users_roles_and_domains/the_security_roles" target="_blank" rel="noopener">see this documentation page</a>.</p>
<p>However, if you assign this role to a user then there is an issue that the user may encounter when trying to use some Developer functionality. If they attempt to insert an item in the Content Editor using the <code>Insert From Template</code> option, they will see the following exception:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[AccessDeniedException: Application access denied.]</div><div class="line">   Sitecore.Diagnostics.Assert.HasAccess(Boolean accessAllowed, String message) +81</div><div class="line">   Sitecore.Shell.Applications.Templates.AddFromTemplate.AddFromTemplateForm.OnLoad(EventArgs e) +73</div><div class="line"></div><div class="line">[TargetInvocationException: Exception has been thrown by the target of an invocation.]</div><div class="line">   System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor) +0</div><div class="line">   System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments) +128</div><div class="line">   System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) +146</div><div class="line">   Sitecore.Reflection.ReflectionUtil.InvokeMethod(MethodInfo method, Object[] parameters, Object obj) +89</div><div class="line">   Sitecore.Web.UI.Sheer.ClientPage.OnLoad(EventArgs e) +594</div><div class="line">   System.Web.UI.Control.LoadRecursive() +68</div><div class="line">   System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint) +1436</div></pre></td></tr></table></figure>
<p>This error stems from the fact that the Author role has been explicitly denied access to the <code>Template Lister</code> application, but not to the <code>Insert From Template</code> button itself. They can see and click the button, but when the application is launched, it throws the error.</p>
<p>This has been reported to Sitecore and confirmed as a bug, and is being tracked under the public reference <strong>113200</strong>.</p>
<p>As a workaround to this issue, you can do the following:</p>
<ul>
<li>Remove <code>sitecore\Author</code> from the <code>sitecore\Developer</code> role</li>
<li>Add the various roles that <code>sitecore\Author</code> inherits directly to the <code>sitecore\Developer</code> role.</li>
</ul>
<p>This means the Developer gets the roles that Author has, but not the <strong>DENY</strong> permissions that have been recently set explicitly on the Author role.</p>
<p>Alternatively, as stated above, these same <strong>DENY</strong> permissions for the Author role don’t seem to be present in Sitecore 8.2, so upgrading to that version will restore the correct functionality.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I discovered an issue with the Developer user role in Sitecore 8.1.3. Though it has been fixed in Sitecore 8.2, it might catch you out if you haven’t upgraded yet.&lt;/p&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-8" scheme="https://www.kasaku.co.uk/tags/sitecore-8/"/>
    
      <category term="bugs" scheme="https://www.kasaku.co.uk/tags/bugs/"/>
    
  </entry>
  
  <entry>
    <title>Moving Datasource items to their pages using Sitecore PowerShell Extensions</title>
    <link href="https://www.kasaku.co.uk/2016/09/14/moving-items-with-single-references/"/>
    <id>https://www.kasaku.co.uk/2016/09/14/moving-items-with-single-references/</id>
    <published>2016-09-14T12:50:01.000Z</published>
    <updated>2017-07-19T13:03:14.693Z</updated>
    
    <content type="html"><![CDATA[<p>Recently on a project I had a need to tidy up the Content tree. In this particular project, renderings on pages made use of Datasource items (best practice, of course!), however rather than keep these items locally to the page in a nested folder, they were all located in a Global folder.<br><a id="more"></a><br>This can certainly work, and it all depends on how you use items, but in this instance it lead to <strong>MANY</strong> items sitting under that Global folder, most of which were only used by a single item.</p>
<p>To tidy this up, I prepared an SPE script that would find items that are only used by a single page and then move them to sit under that item, inside a Content folder.</p>
<p>This is the script:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Identifies Datasource items that only have one single referrer and moves them to</span></div><div class="line"><span class="comment"># a _Content folder that item, creating the folder if necessary.</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># Item path to find content items within. The script will include all descendants.</span></div><div class="line"><span class="variable">$itemPath</span> = <span class="string">"master:/sitecore/content/MyWebsite/Global Content/StandardText"</span></div><div class="line"></div><div class="line"><span class="comment"># Add template IDs here that you want picked up</span></div><div class="line"><span class="variable">$validTemplates</span> = @(</div><div class="line">    <span class="comment">#"&#123;43DB35A0-E104-4165-B4E9-6E393528B27B&#125;"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># The template path to use for the Content folder under page items</span></div><div class="line"><span class="variable">$contentFolderTemplatePath</span> = <span class="string">"User Defined/MyWebsite/Folder Templates/Page Content Folder"</span></div><div class="line"></div><div class="line"><span class="comment"># What to name the Content folder when creating</span></div><div class="line"><span class="variable">$contentFolderName</span> = <span class="string">"_Content"</span></div><div class="line"></div><div class="line"><span class="comment"># -------- Script follows --------</span></div><div class="line"></div><div class="line"><span class="variable">$items</span> = <span class="built_in">Get-ChildItem</span> <span class="variable">$itemPath</span> -Recurse</div><div class="line"><span class="variable">$moveCollection</span> = @()</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ( <span class="variable">$item</span> <span class="keyword">in</span> <span class="variable">$items</span> )</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="variable">$validTemplates</span> <span class="nomarkup">-contains</span> <span class="variable">$item</span>.TemplateID)) &#123;</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"># Get the item referrers. As multiple versions of the same referrer will be</span></div><div class="line">    <span class="comment"># returned separately, just get the unique IDs.</span></div><div class="line">    <span class="variable">$itemReferrers</span> = <span class="variable">$item</span> | Get-ItemReferrer -ItemLink | Select  -Expand SourceItemID -Unique</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="variable">$itemReferrers</span>.Count <span class="nomarkup">-eq</span> <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">Write-Host</span> <span class="string">"$(<span class="variable">$item</span>.FullPath) has no referrers so can't be moved."</span></div><div class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$itemReferrers</span>.Count <span class="nomarkup">-gt</span> <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">Write-Host</span> <span class="string">"$(<span class="variable">$item</span>.FullPath) has more than one referrer and will be left. (Count = $(<span class="variable">$itemReferrers</span>.Count))"</span></div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment"># Item has a single referrer, it's a candidate to move.</span></div><div class="line"></div><div class="line">        <span class="variable">$destinationItem</span> = <span class="built_in">Get-Item</span> -Path master: -ID <span class="variable">$itemReferrers</span>[<span class="number">0</span>].Guid -ErrorAction SilentlyContinue</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="variable">$destinationItem</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="variable">$moveItem</span> = <span class="built_in">New-Object</span> System.Object</div><div class="line">            <span class="variable">$moveItem</span> | <span class="built_in">Add-Member</span> -type NoteProperty -name DatasourceItem -value <span class="variable">$item</span></div><div class="line">            <span class="variable">$moveItem</span> | <span class="built_in">Add-Member</span> -type NoteProperty -name DestinationItem -value <span class="variable">$destinationItem</span></div><div class="line"></div><div class="line">            <span class="variable">$moveCollection</span> += <span class="variable">$moveItem</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">Write-Host</span> <span class="string">"$(<span class="variable">$item</span>.FullPath) has a single referrer, but that item could not be found."</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># How many items we've identifed to move</span></div><div class="line"><span class="built_in">Write-Host</span> <span class="variable">$moveCollection</span>.Count</div><div class="line"></div><div class="line"><span class="comment"># If you just want to identify items, uncomment this return.</span></div><div class="line"><span class="comment">#return</span></div><div class="line"></div><div class="line"><span class="comment"># Now perform the move.</span></div><div class="line"><span class="keyword">foreach</span> ( <span class="variable">$moveItem</span> <span class="keyword">in</span> <span class="variable">$moveCollection</span> )</div><div class="line">&#123;</div><div class="line">    <span class="variable">$itemContentFolderPath</span> = <span class="string">"master:"</span> + <span class="variable">$moveItem</span>.DestinationItem.FullPath + <span class="string">"/"</span> + <span class="variable">$contentFolderName</span></div><div class="line">    <span class="variable">$contentFolder</span> = <span class="built_in">Get-Item</span> -Path <span class="variable">$itemContentFolderPath</span>  -ErrorAction SilentlyContinue</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="variable">$contentFolder</span>) &#123;</div><div class="line">        <span class="comment"># Need to create content folder</span></div><div class="line">        <span class="variable">$contentFolder</span> = <span class="built_in">New-Item</span> -Path <span class="variable">$itemContentFolderPath</span> -ItemType <span class="variable">$contentFolderTemplatePath</span></div><div class="line"></div><div class="line">        <span class="built_in">Write-Host</span> <span class="string">"Created content folder for <span class="variable">$itemContentFolderPath</span>"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">Write-Host</span> <span class="string">"Moving $(<span class="variable">$moveItem</span>.DatasourceItem.FullPath)"</span></div><div class="line"></div><div class="line">    <span class="built_in">Move-Item</span> -Path <span class="variable">$moveItem</span>.DatasourceItem.FullPath -Destination <span class="variable">$contentFolder</span>.FullPath</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s all there is. The general flow of the script is:</p>
<ul>
<li>Recurse through all items in the content folder specified</li>
<li>Find items that have only 1 referrer. Multiple referrals from different versions of the same item count as 1.</li>
<li>Move those content items to sit under the referrer in a _Content folder. Create the folder if it doesn’t exist.</li>
</ul>
<p>The top-half of the script can be executed (uncomment the return line) if you just want to identify which items can and can’t be moved.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently on a project I had a need to tidy up the Content tree. In this particular project, renderings on pages made use of Datasource items (best practice, of course!), however rather than keep these items locally to the page in a nested folder, they were all located in a Global folder.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-powershell-extensions" scheme="https://www.kasaku.co.uk/tags/sitecore-powershell-extensions/"/>
    
      <category term="powershell" scheme="https://www.kasaku.co.uk/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>Using Sitecore Powershell Extensions to import CSV data</title>
    <link href="https://www.kasaku.co.uk/2016/04/10/importing-csv-data-in-sitecore/"/>
    <id>https://www.kasaku.co.uk/2016/04/10/importing-csv-data-in-sitecore/</id>
    <published>2016-04-10T16:45:52.000Z</published>
    <updated>2016-09-06T12:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Have you ever needed to import data into Sitecore from an Excel or CSV file? It’s a common request and it’s actually also a really simple task thanks to Sitecore Powershell Extensions.<br><a id="more"></a><br>First of all, let’s assume you have a spreadsheet with the relevant information in - in this dataset, each row represents a set of changes to make to an item; the first column contains the item reference and the remaining columns are values for different fields within the item.</p>
<p>Below is an example of such a dataset, where we have a bulk set of changes to be made to the MetaTitle + MetaDescription fields. In this example, the item reference is an item path, but this could just as easily be an item ID.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ItemPath,MetaTitle,MetaDescription</div><div class="line">/sitecore/content/home,Home,Some blurb about how lovely our website is</div><div class="line">/sitecore/content/home/products,Products,Buy our products! All of them!</div><div class="line">/sitecore/content/home/contact-us,Contact Us,Contact our lovely website</div></pre></td></tr></table></figure>
<p>To prepare this data for the import, we want it in CSV format. If the data is within Excel, Excel allows you to <code>Save As</code> the spreadsheet to convert it to a CSV. Make sure it to include a header row in the file, as seen in the example above.</p>
<p>Then, within Sitecore Powershell we can use a very simple script to import the data:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$importData</span> = <span class="built_in">Import-CSV</span> <span class="string">"C:\Path\To\ImportData.csv"</span></div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ( <span class="variable">$row</span> <span class="keyword">in</span> <span class="variable">$importData</span> ) &#123;</div><div class="line"></div><div class="line">    <span class="variable">$item</span> = <span class="built_in">Get-Item</span> -Path master:$(<span class="variable">$row</span>.ItemPath) -ErrorAction SilentlyContinue</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="variable">$item</span>) &#123;</div><div class="line">        <span class="variable">$item</span>.Editing.BeginEdit()</div><div class="line">        <span class="variable">$item</span>[<span class="string">"MetaTitle"</span>] = <span class="variable">$row</span>.MetaTitle</div><div class="line">        <span class="variable">$item</span>[<span class="string">"MetaDescription"</span>] = <span class="variable">$row</span>.MetaDescription</div><div class="line">        <span class="variable">$item</span>.Editing.EndEdit() | <span class="built_in">Out-Null</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">Write-Host</span> <span class="string">"Couldn't find: $(<span class="variable">$row</span>.ItemPath)"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And that’s all there is to it! The magic is in the <code>Import-CSV</code> command, which is part of regular Powershell, and imports all of the data into the <code>$importData</code> variable. The script can then iterate over this data and read each row to find the item and then make the updates. As long as the CSV file hash headers, each <code>$row</code> variable will have properties exposed that correspond to each of the columns, e.g. <code>$row.ItemPath</code>. </p>
<p>The <code>-ErrorAction SilentlyContinue</code> is there to swallow the exception that is raised if <code>Get-Item</code> can’t find the specified item. To handle this in a more user-friendly manner, we then perform a null-check on <code>$item</code> and if that fails we log out the ItemPath that could not be found. </p>
<p>Pretty simple, huh? </p>
<p>For an additional performance boost when importing your data, you can optionally wrap the import in an instantiation of the <code>Sitecore.Data.BulkUpdateContext</code> class, which prevents indexing + events from firing after each individual update:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Import-Function -Name New-UsingBlock</div><div class="line"></div><div class="line">New-UsingBlock (<span class="built_in">New-Object</span> Sitecore.Data.BulkUpdateContext) &#123;</div><div class="line">    <span class="keyword">foreach</span> ( ... ) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Have you ever needed to import data into Sitecore from an Excel or CSV file? It’s a common request and it’s actually also a really simple task thanks to Sitecore Powershell Extensions.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-powershell-extensions" scheme="https://www.kasaku.co.uk/tags/sitecore-powershell-extensions/"/>
    
      <category term="powershell" scheme="https://www.kasaku.co.uk/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>Sitecore Powershell Extensions talk at London Sitecore User Group March 2016</title>
    <link href="https://www.kasaku.co.uk/2016/04/06/sitecore-powershell-london-march-2016/"/>
    <id>https://www.kasaku.co.uk/2016/04/06/sitecore-powershell-london-march-2016/</id>
    <published>2016-04-06T12:00:00.000Z</published>
    <updated>2016-09-06T12:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I got the opportunity to give a talk on Sitecore Powershell Extensions at the London Sitecore Tech User group.</p>
<p>I had a great time, and along with seeing 3 other great presentations, I was super pleased by the positive feedback I received on my talk. Thank you to everyone who attended!<br><a id="more"></a></p>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>There was a video taken on the night, so if you couldn’t make the talk and want to watch it, it’s just below. Unfortunately there was an issue with the recording and some audio was lost, but I’ve supplied a voiceover for that part to cover what was missed:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IQQaHAZa8AI" frameborder="0" allowfullscreen></iframe>

<h3 id="Slide-deck-demo-scripts"><a href="#Slide-deck-demo-scripts" class="headerlink" title="Slide deck + demo scripts"></a>Slide deck + demo scripts</h3><p>If you’re interested, I have uploaded some of the materials from the talk:</p>
<ul>
<li><a href="/talks/sc-powershell">The slide deck of the talk</a></li>
<li><a href="/2016/04/06/sitecore-powershell-london-march-2016/SPEDemo-Scripts-1.0.zip" title="A Sitecore package of the demo scripts">A Sitecore package of the demo scripts</a></li>
<li><a href="/2016/04/06/sitecore-powershell-london-march-2016/SPEDemo-Items-1.0.zip" title="A Sitecore package of supporting items + templates for the scripts">A Sitecore package of supporting items + templates for the scripts</a>
</li>
</ul>
<p>Bear in mind that if you use the packages, you’ll need to have SPE installed first. See just below for links!</p>
<h3 id="Enough-talk-I-just-want-SPE"><a href="#Enough-talk-I-just-want-SPE" class="headerlink" title="Enough talk, I just want SPE!"></a>Enough talk, I just want SPE!</h3><p>Here are the links to the good stuff:</p>
<ul>
<li><a href="https://marketplace.sitecore.net/en/Modules/Sitecore_PowerShell_console.aspx" target="_blank" rel="noopener">Sitecore Powershell Extensions in the Sitecore Marketplace</a></li>
<li><a href="https://www.gitbook.com/book/sitecorepowershell/sitecore-powershell-extensions/details" target="_blank" rel="noopener">The Sitecore Powershell Extensions GitBook manual</a></li>
</ul>
<h3 id="Debugging-support-in-SPE-4-0"><a href="#Debugging-support-in-SPE-4-0" class="headerlink" title="Debugging support in SPE 4.0"></a>Debugging support in SPE 4.0</h3><p>One of the questions I was asked a couple of times after the talk was whether you are able to debug scripts in Sitecore Powershell Extensions. I was using version 3.3 in the demo, which did not have this feature, but the <em>very newly released</em> version 4.0 comes with full debugging support!</p>
<p>Here’s a video from <a href="http://blog.najmanowicz.com/" target="_blank" rel="noopener">Adam Najmanowicz</a> demonstrating the new debugging functionality:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6rhPWVKcreI" frameborder="0" allowfullscreen></iframe>

<p>Pretty great, huh?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I got the opportunity to give a talk on Sitecore Powershell Extensions at the London Sitecore Tech User group.&lt;/p&gt;
&lt;p&gt;I had a great time, and along with seeing 3 other great presentations, I was super pleased by the positive feedback I received on my talk. Thank you to everyone who attended!&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-powershell-extensions" scheme="https://www.kasaku.co.uk/tags/sitecore-powershell-extensions/"/>
    
      <category term="powershell" scheme="https://www.kasaku.co.uk/tags/powershell/"/>
    
      <category term="talks" scheme="https://www.kasaku.co.uk/tags/talks/"/>
    
  </entry>
  
  <entry>
    <title>Multi-Line field bugs in Sitecore 8.1</title>
    <link href="https://www.kasaku.co.uk/2016/03/21/multiline-field-bugs-in-sitecore-8-1/"/>
    <id>https://www.kasaku.co.uk/2016/03/21/multiline-field-bugs-in-sitecore-8-1/</id>
    <published>2016-03-21T14:00:00.000Z</published>
    <updated>2016-03-22T09:08:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you’re using Multi-Line fields in Sitecore, as of Sitecore 8.1 Update 1 you will encounter problems with using them when editing content in the Experience Editor.</p>
<p>These two bugs are:</p>
<ol>
<li>When you create a new line in the field, the Experience Editor will actually add two new line breaks instead of one.</li>
<li>When you save, all lines except for the first are not saved.<a id="more"></a>
</li>
</ol>
<p>Here is a demo illustrating both issues:</p>
<p></p><p><img src="/2016/03/21/multiline-field-bugs-in-sitecore-8-1/multi-line-bug.gif" title="Bug demo"></p><br>Both of these issues have been reported to Sitecore Support. Here’s a bit more information on each:<p></p>
<h2 id="Additional-lines-bug"><a href="#Additional-lines-bug" class="headerlink" title="Additional-lines bug"></a>Additional-lines bug</h2><p>This bug is down to the <code>FieldChromeType.js</code> file used in the front-end to provide the editing functionality for the fields. It is incorrectly adding in two <code>&lt;br&gt;</code> tags into the HTML when a new-line is created.</p>
<p>This issue has been reported to Sitecore Support and has been confirmed as a bug. If you have need to reference this bug in a support ticket with Sitecore, the public reference number is <strong>103584</strong>.</p>
<p>Sitecore Support have supplied an updated version of the JS file that fixes the issue. You can get this file from Support if you reference the above number, also if you log this issue it will help inform Sitecore of how wide-affecting the issue is.</p>
<p>I have also <a href="/2016/03/21/multiline-field-bugs-in-sitecore-8-1/FieldChromeType.js" title="hosted the file here">hosted the file here</a> on this site for your convenience. By using this file you accept responsibility for doing so, and I <strong>strongly recommend</strong> you compare this file to the one you are replacing in your solution to confirm what you are changing, as well as still reporting to Sitecore Support that you encountered the bug.</p>
<p>To apply the fix, just place the updated file in <code>\sitecore\shell\Applications\Page Modes\ChromeTypes</code>, replacing the existing file.</p>
<p>Note that this fix is for 8.1 Update 1 and Update 2 <strong>only</strong>.</p>
<h2 id="Save-bug"><a href="#Save-bug" class="headerlink" title="Save bug"></a>Save bug</h2><p>In Sitecore 8.1 Update 1, the <code>Sitecore.ExperienceEditor.WebUtilty</code> class was updated to amend the regex that is used to process fields before they are saved. Unfortunately, the new regex in place is too hungry and matches across all <code>&lt;br&gt;</code> tags, removing them along with all the content inbetween. The result is that only the first line remains.</p>
<p>This issue has been reported to Sitecore Support and has been confirmed as a bug. If you are looking for information on this bug, the public reference number is <strong>101295</strong>. This problem also affects the recently released Update 2.</p>
<p>Unfortuntely, the <code>WebUtility</code> class is static and as such it’s not trivial to implement a replacement for this class. There are no references to it in configuration allowing it to be swapped out with an alternative.</p>
<p>The workaround suggestion by Support at the moment is to use a Rich-Text field.</p>
<p>Alternatively, and the route we have gone, is to remove the ability to edit this field in the Experience Editor and to have our users make the update to this field in the Content Editor. As this was just a single field that is only used on a handful of items, that worked well enough for us. However, if you make extensive use of the Multi-Line field and Experience Editor, you may need to investigate a more robust workaround. If you have done this, please comment below!</p>
<h2 id="Related-bugs"><a href="#Related-bugs" class="headerlink" title="Related bugs"></a>Related bugs</h2><p>Kayee has written a blog post on a very similar bug that also effects the Multi-Line field in the Experience Editor, though in that scenario it’s if you are using it combined with a Custom Experience Button.</p>
<p>Fortunately, that bug has fix available for it. You can see a demo of the bug and get the fix from the link below.</p>
<p><a href="http://www.kayee.nl/2016/01/10/sitecore-8-1-multi-line-text-field-with-experience-button-problem/" target="_blank" rel="noopener">http://www.kayee.nl/2016/01/10/sitecore-8-1-multi-line-text-field-with-experience-button-problem/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’re using Multi-Line fields in Sitecore, as of Sitecore 8.1 Update 1 you will encounter problems with using them when editing content in the Experience Editor.&lt;/p&gt;
&lt;p&gt;These two bugs are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you create a new line in the field, the Experience Editor will actually add two new line breaks instead of one.&lt;/li&gt;
&lt;li&gt;When you save, all lines except for the first are not saved.
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-8" scheme="https://www.kasaku.co.uk/tags/sitecore-8/"/>
    
      <category term="bugs" scheme="https://www.kasaku.co.uk/tags/bugs/"/>
    
  </entry>
  
  <entry>
    <title>Implementing a Virtual Field in Sitecore</title>
    <link href="https://www.kasaku.co.uk/2015/08/16/implementing-a-virtual-field-in-sitecore/"/>
    <id>https://www.kasaku.co.uk/2015/08/16/implementing-a-virtual-field-in-sitecore/</id>
    <published>2015-08-16T09:40:20.000Z</published>
    <updated>2016-03-21T13:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>My recent work with Sitecore has involved getting to spend some time customizing the search results for editors. One task I wanted to accomplish was to improve the standard DateRange facet that is supplied with Sitecore. I had two issues I wanted to solve; I wanted a facet that was:</p>
<ul>
<li>More granular. The existing facet has values such as This Week, This Month, This Year. I wanted editors to have more options here, for example a facet to show items “3-6 months old”.</li>
<li>A better display. The standard facet displays its values in a rather user-unfriendly manner, e.g. “thisweek”. I would prefer “This week”.<a id="more"></a>
The facets used in Search Results are tied to items underneath <code>/System/Settings/Buckets/Facets</code>. I created a new item here, called “Friendly Date Range”, that I would use in place of “Date Range”. I associated this with a field I would create, to be called <code>friendlydaterange</code>.</li>
</ul>
<p>Now, the interesting thing about the existing <code>daterange</code> field is that it is not tied to an existing field in the index, it uses a <strong>Virtual Field</strong>. You can see how <code>daterange</code> is defined in the default index configuration here:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">virtualFieldProcessors</span> <span class="attr">hint</span>=<span class="string">"raw:AddVirtualFieldProcessor"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">virtualFieldProcessor</span> <span class="attr">fieldName</span>=<span class="string">"daterange"</span> <span class="attr">type</span>=<span class="string">"Sitecore.ContentSearch.VirtualFields.DateRangeFieldProcessor, Sitecore.ContentSearch"</span> /&gt;</span></div><div class="line">	... other fields ...</div><div class="line"><span class="tag">&lt;/<span class="name">virtualFieldProcessors</span>&gt;</span></div></pre></td></tr></table></figure>
<p>I had a good look around this class to determine how these fields are created, and thought I would summarise the interfaces that you will need to implement if you want to implement your own virtual field.</p>
<h1 id="Virtual-Fields"><a href="#Virtual-Fields" class="headerlink" title="Virtual Fields"></a>Virtual Fields</h1><p>A virtual field is a field in the search index that <em>doesn’t actually exist in the physical index</em>. Instead, it is computed at search run-time, and will typically use one or more backing fields that <strong>do</strong> exist within the index to create an entirely new field. Note that this is different to <code>ComputedIndexField</code>s which are computed <em>when creating the index</em> and are stored in the index.</p>
<p>Why is a virtual field useful? Well it allows you to have a value of the field is dependent on <em>when the search is run</em>, rather than when the index was made; this is great for field values that are date and time dependent.</p>
<p>In the case of <code>daterange</code> - the actual index stores the absolute creation date of an item under <code>__smallcreateddate</code>. This value is set and doesn’t change. However, the <code>daterange</code> virtual field is used to turn this absolute value of, say, <em>20150803</em> into a relative one of <em>thismonth</em>. This new value obviously cannot be stored directly in the index itself, as it will quickly become out of date!</p>
<p>The virtual field works by implementing several methods that are called during the execution of the search. These are used to read and alter the fields of a document that come back with a search, as well as altering the outgoing query when a search needs to be made using the virtual field. There is also full support for faceting on virtual fields.</p>
<p>Let’s look at how the interfaces are implemented. The <code>DateRangeFieldProcessor</code> shown above implements two interfaces, <code>IFieldQueryTranslator</code> and <code>IVirtualFieldProcessor</code>. Here is what each implementation of these is required to do for a virtual field to work. The following was applied to <strong>Sitecore 7.2</strong>, but should be good for versions following that too.</p>
<h2 id="IFieldQueryTranslator"><a href="#IFieldQueryTranslator" class="headerlink" title="IFieldQueryTranslator"></a>IFieldQueryTranslator</h2><p>The <code>IFieldQueryTranslator</code> has two methods and a property. Here’s what they do:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span> FieldName &#123; <span class="keyword">get</span>; &#125;</div></pre></td></tr></table></figure>
<p>Simply the field name your virtual field will use.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">TranslatedFieldQuery <span class="title">TranslateFieldQuery</span>(<span class="params"><span class="keyword">string</span> fieldName, <span class="keyword">object</span> fieldValue, ComparisonType comparison, FieldNameTranslator fieldNameTranslator</span>)</span>;</div></pre></td></tr></table></figure>
<p>Takes the query from the search, which will include your virtual field being queried on, e.g. <code>daterange:thismonth</code>. Here you convert that query into a query on the real backing field(s), e.g. A range query on <code>__smallcreateddate</code> for values that fall in this current month.</p>
<p>This is only called if the fieldName passed in, matches the FieldName property, so it will only get called if your virtual field has been searched on.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; <span class="title">TranslateFieldResult</span>(<span class="params">IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; fields, FieldNameTranslator fieldNameTranslator</span>)</span>;</div></pre></td></tr></table></figure>
<p>When the results of the query come back from the index, you will want to inject the value for your virtual field into the document. Typically you would inspect the real backing field(s), determine what the value of your virtual field would be, and add it to the fields dictionary to return.</p>
<p>e.g. The document contains a value that falls within the current month in <code>__smallcreateddate</code>, so “thismonth” is added to <code>daterange</code> in the fields dictionary.</p>
<h2 id="IVirtualFieldProcessor"><a href="#IVirtualFieldProcessor" class="headerlink" title="IVirtualFieldProcessor"></a>IVirtualFieldProcessor</h2><p>The <code>IVirtualFieldProcessor</code> has two methods to add faceting support. Here’s what they do:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">GetFacetsArgs <span class="title">TranslateFacetQuery</span>(<span class="params">GetFacetsArgs args</span>)</span>;</div></pre></td></tr></table></figure>
<p>When a faceted search is made, you can inject a <code>FacetQuery</code> into the search for the real backing field(s) your virtual field uses. This is so that when the results come back from the index, you’ll have that facet data to use to create the facet data for your virtual field.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDictionary&lt;<span class="keyword">string</span>, ICollection&lt;KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;&gt;&gt; TranslateFacetResult(ProcessFacetsArgs args);</div></pre></td></tr></table></figure>
<p>When the results come back from the index, you’ll be given a collection of all of the facets and their values. At this point you can take the facet results for the backing field(s) you are using, and process them to create your own facet results.</p>
<p>For example, if with <code>TranslateFacetQuery</code> you added a <code>FacetQuery</code> for <code>__smallcreateddate</code>, you can iterate through this facet result and sum up all of the values that fall within the current month to create your own facet result for “thismonth”.</p>
<p>The virtual facet result is added to the collection, and the backing field results are removed as they are no longer needed.</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>That’s all you need to do to implement a virtual field. Please leave a comment if there is something I’ve missed or if you have any questions.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My recent work with Sitecore has involved getting to spend some time customizing the search results for editors. One task I wanted to accomplish was to improve the standard DateRange facet that is supplied with Sitecore. I had two issues I wanted to solve; I wanted a facet that was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More granular. The existing facet has values such as This Week, This Month, This Year. I wanted editors to have more options here, for example a facet to show items “3-6 months old”.&lt;/li&gt;
&lt;li&gt;A better display. The standard facet displays its values in a rather user-unfriendly manner, e.g. “thisweek”. I would prefer “This week”.
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-search" scheme="https://www.kasaku.co.uk/tags/sitecore-search/"/>
    
  </entry>
  
  <entry>
    <title>From Wordpress to Hexo</title>
    <link href="https://www.kasaku.co.uk/2015/06/05/from-wordpress-to-hexo/"/>
    <id>https://www.kasaku.co.uk/2015/06/05/from-wordpress-to-hexo/</id>
    <published>2015-06-05T12:00:00.000Z</published>
    <updated>2016-03-18T08:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>The site is being relaunched today! Previously, <a href="http://www.kasaku.co.uk">kasaku.co.uk</a> was running under Wordpress with Azure hosting. I decided that Wordpress, and especially the Wordpress hosting, was a little overkill for the site. With that in mind, I decided to look at what static-site generators were around.<br><a id="more"></a><br>After looking at a couple, I’ve decided to run with <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a> which is built on top of <a href="https://nodejs.org/" target="_blank" rel="noopener">NodeJS</a>. Whilst I don’t use NodeJS for any server-side development, I’ve been making more and more use of it in my development environment for front-end build processing through <a href="http://gruntjs.com/" target="_blank" rel="noopener">Grunt</a>, so I had most of what was required already.</p>
<p>The site is pretty basic at the moment, and just hosted through Github for now. But the redesign has brought about a couple of changes:</p>
<ul>
<li>Social media links, including one for the new Sitecore Community!</li>
<li>Disqus for comments</li>
<li>More readable sytax highlighting</li>
<li>RSS feed, if you like that sort of thing.</li>
</ul>
<p>The syntax highlighting is based on <a href="https://highlightjs.org/" target="_blank" rel="noopener">HighlightJS</a>, which does appear to have a couple of bugs when it comes to rendering C# source. Hopefully I can get those ironed out.</p>
<p>I also might look to expand the template and build on more areas in the site, but for now it’s just remaining a blog!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The site is being relaunched today! Previously, &lt;a href=&quot;http://www.kasaku.co.uk&quot;&gt;kasaku.co.uk&lt;/a&gt; was running under Wordpress with Azure hosting. I decided that Wordpress, and especially the Wordpress hosting, was a little overkill for the site. With that in mind, I decided to look at what static-site generators were around.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Sitecore custom provider gotcha</title>
    <link href="https://www.kasaku.co.uk/2015/02/16/sitecore-custom-provider-gotcha/"/>
    <id>https://www.kasaku.co.uk/2015/02/16/sitecore-custom-provider-gotcha/</id>
    <published>2015-02-16T12:28:40.000Z</published>
    <updated>2016-03-18T08:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sitecore uses the <a href="ASP.NET Membership Provider">https://msdn.microsoft.com/en-us/library/ms731049(v=vs.110).aspx</a> framework for managing its users, and also provides this as a means for you to manage your own users of your website in the <em>extranet</em> domain (or other domains that you have implemented).</p>
<p>In certain cases, you may want to implement your own custom backing store for users, rather than the default SQL Server provider. Fortunately, Sitecore includes a mechanism so that it can support multiple providers under one website, this is through the <code>SwitchingProviders</code> within the <code>Sitecore.Security</code> namespace.<br><a id="more"></a><br>There are already a number of useful links covering implementing your own custom membership provider using the Switcher:</p>
<ul>
<li><a href="http://sdn.sitecore.net/upload/sdn5/modules/ad/low-level_sitecore_cms_security_and_custom_providers-a4.pdf" target="_blank" rel="noopener">http://sdn.sitecore.net/upload/sdn5/modules/ad/low-level_sitecore_cms_security_and_custom_providers-a4.pdf</a></li>
<li><a href="http://www.mintydog.com/2013/09/a-custom-membership-provider-in-sitecore-part-1/" target="_blank" rel="noopener">http://www.mintydog.com/2013/09/a-custom-membership-provider-in-sitecore-part-1/</a></li>
<li><a href="http://www.mintydog.com/2013/10/a-custom-membership-provider-in-sitecore-part-2/" target="_blank" rel="noopener">http://www.mintydog.com/2013/10/a-custom-membership-provider-in-sitecore-part-2/</a></li>
<li><a href="https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/" target="_blank" rel="noopener">https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/</a></li>
<li><a href="https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/" target="_blank" rel="noopener">https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/</a></li>
</ul>
<p>This is just a short blog post to highlight a couple of a small gotcha that you may encounter, due to some inconsistencies in Sitecore’s implementation of the Switching providers.</p>
<h3 id="The-issue"><a href="#The-issue" class="headerlink" title="The issue"></a>The issue</h3><p>The first link in the above list is the official Sitecore documentation for implementing new providers. In <em>3.1.1 Configuring Switching Providers</em>, the following attributes for defining providers via a SwitchingProvider are defined:</p>
<ul>
<li>ProviderName</li>
<li>StoreFullNames</li>
<li>Wildcard</li>
<li>Domains</li>
</ul>
<p>Whilst these are the properties for the <code>SwitchingMembershipProvider</code>, the remaining providers have a couple of additional undocumented options, that have a large affect on how they operate:</p>
<h4 id="SwitchingRoleProvider"><a href="#SwitchingRoleProvider" class="headerlink" title="SwitchingRoleProvider"></a>SwitchingRoleProvider</h4><p>The Role Provider adds an additional 2 undocumented properties:</p>
<p><strong>ignoredUserDomains</strong> - If this is specified, then the provider <strong>won’t apply</strong> to the domains listed. Multiple domains should be comma-separated.<br><strong>allowedUserDomains</strong> - If this is specified, then the provider <strong>will only apply</strong> to the domains listed. Multiple domains should be comma-separated.</p>
<p>As you can see, the way these two operate are at odds with each other (one is a blacklist, the other a whitelist). The provider only expects there to be one provided,; if you provide both, it will throw an exception.</p>
<p>Note that for this provider, the <code>domain</code> property <strong>is completely ignored</strong>. This can cause some real confusion if you have implemented a new provider and you are wondering why it is getting called for other domains, even though you’ve specified a domain there.</p>
<h4 id="SwitchingProfileProvider"><a href="#SwitchingProfileProvider" class="headerlink" title="SwitchingProfileProvider"></a>SwitchingProfileProvider</h4><p>The Profile Provider adds just the one additional property:</p>
<p><strong>ignoredDomains</strong> - This works exactly the same as <strong>ignoredUserDomains</strong> for the Role Provider.</p>
<p>And that’s it. No option for a whitelist only, and again, the domain property is ignored.</p>
<p>It’s not clear why the Role + Profile providers don’t just provide the same properties as each other, nor why these aren’t available to the Membership Provider. This might just be a small gotcha, but it’s worth taking note of this little eccentricity of the code.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sitecore uses the &lt;a href=&quot;ASP.NET Membership Provider&quot;&gt;https://msdn.microsoft.com/en-us/library/ms731049(v=vs.110).aspx&lt;/a&gt; framework for managing its users, and also provides this as a means for you to manage your own users of your website in the &lt;em&gt;extranet&lt;/em&gt; domain (or other domains that you have implemented).&lt;/p&gt;
&lt;p&gt;In certain cases, you may want to implement your own custom backing store for users, rather than the default SQL Server provider. Fortunately, Sitecore includes a mechanism so that it can support multiple providers under one website, this is through the &lt;code&gt;SwitchingProviders&lt;/code&gt; within the &lt;code&gt;Sitecore.Security&lt;/code&gt; namespace.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title>Event tracking in Google Analytics</title>
    <link href="https://www.kasaku.co.uk/2015/01/26/event-tracking-in-google-analytics/"/>
    <id>https://www.kasaku.co.uk/2015/01/26/event-tracking-in-google-analytics/</id>
    <published>2015-01-26T14:22:24.000Z</published>
    <updated>2016-03-18T08:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a short guide on putting together a simple-yet-powerful script for tracking custom events in Google Analytics. Whilst there <strong>is</strong> already a ton of information on the web about Google Analytics and what you can achieve with it, this blog entry is aimed at devs who want to get going quickly with event tracking.<br><a id="more"></a><br>If you’re completely new to Google Analytics, your best bet is to at least read the <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/" target="_blank" rel="noopener">Google introduction</a>. They also provide documentation to give <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" target="_blank" rel="noopener">an overview on Event Tracking</a>.</p>
<p>The rest of this post assumes that you are familiar enough with GA to know about the ga() function and how it can be used to send events.</p>
<p><em>Note: Google Analytics doesn’t <strong>require</strong> jQuery, but the examples in this blog do use jQuery for setting up events. It is also assumed you are using the new version of Google Analytics, analytics.js.</em></p>
<h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>You’ll need the Google Analytics script defined in your page. If you haven’t done this yet, <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/" target="_blank" rel="noopener">Google have got you covered</a>.</p>
<p>If using ASP.NET MVC, it’s a good idea to have this in its own view that you can cache the output of. You can also use a configuration setting to determine whether to output the script at all, to avoid enabling Google Analytics on development / test servers, or perhaps to use a different ID in those environments.</p>
<p>Simply adding this script will get page views tracking in Google Analytics.</p>
<h2 id="Creating-a-custom-tracking-script"><a href="#Creating-a-custom-tracking-script" class="headerlink" title="Creating a custom tracking script"></a>Creating a custom tracking script</h2><p>Once you have the default script, you can then add your own javascript to implement additional GA functionality throughout your site.</p>
<p>The following is a skeleton script that you can then expand on:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysite = mysite || &#123;&#125;;</div><div class="line"><span class="keyword">var</span> mysite.analytics = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// _Private function</span></div><div class="line">  <span class="keyword">var</span> _setTrackingEvents = <span class="function"><span class="keyword">function</span>(<span class="params">ga</span>) </span>&#123;</div><div class="line">    <span class="comment">// Custom tracking code to go here...</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// Public function  </span></div><div class="line">  <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ga === <span class="string">'undefined'</span>) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> ga_debug !== <span class="string">'undefined'</span> &amp;&amp; ga_debug) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Setting up analytics in debug mode.'</span>);</div><div class="line"></div><div class="line">        ga = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); &#125;;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Google Analytics disabled.'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _setTrackingEvents(ga);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">init</span>: init</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>Typically, once this script has been loaded, then, at a suitable point in your site’s code (e.g. after page load), you can call <code>mysite.analytics.init();</code> to execute the code and setup your events.</p>
<p>If the Google Analytics script hasn’t been added to the page, this script checks to see if there is a <code>ga_debug</code> variable defined. If there is and its value is <a href="http://www.sitepoint.com/javascript-truthy-falsy/" target="_blank" rel="noopener">truthy</a>, the script creates a dummy ga() function that simply logs to the console. This is useful for testing your analytics events without needing a real GA account in place. If the debug value isn’t in place, this script simply doesn’t go any further.</p>
<h2 id="Event-Tracking"><a href="#Event-Tracking" class="headerlink" title="Event Tracking"></a>Event Tracking</h2><p>Right, on to <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" target="_blank" rel="noopener">event tracking</a>! As events are simply tracked by calling a function in javascript, they can be associated with almost <em>any</em> user behaviour on a website - this includes clicking on anything on the page, timings between actions, the scrolling of a page, and much more. If you can imagine it, you can likely write it.</p>
<p>Let’s look at some of the events you could create.</p>
<p>First of all, a good piece of advice is to <strong>keep your event definitions generic</strong> where you can.</p>
<p>Rather than tracking every interaction individually on your site, try to logically group the different types of interaction together and then come up with a method of selecting these elements. This is especially important where you are building a CMS-driven site and the HTML will be generated on the server.</p>
<p>As an example of a poor way of implementing tracking links, look at the following HTML and Javascript:</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"products-link"</span> <span class="attr">href</span>=<span class="string">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"contact-link"</span> <span class="attr">href</span>=<span class="string">"/contact"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#products-link'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Link'</span>, <span class="string">'Clicked'</span>, <span class="string">'Products'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#contact-link'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Link'</span>, <span class="string">'Clicked'</span>, <span class="string">'Contact'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Whilst this will track both of the links, it is time consuming to implement, and you’re going to need to expand your analytics script every time you add a new link to the site.</p>
<p>How about this instead?</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-ga-link</span> <span class="attr">href</span>=<span class="string">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-ga-link</span> <span class="attr">href</span>=<span class="string">"/contact"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'[data-ga-link]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Link'</span>, <span class="string">'Clicked'</span>, $(<span class="keyword">this</span>).text() );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>If you prefer, you can use a <code>class selector</code> instead, though using data-<em> attributes helps to keep the classes of your elements simply for styling. You can even drop this method and go for </em>any* click on a link using the <code>a</code> selector, though this is rather indiscriminate. It’s up to you ultimately on what you’re interested in tracking.</p>
<p>The message here though is to try to group the interactions where you can, so your tracking code can be simpler. There are, of course, times where you will want to track specific events that only occur in single places on your site, and that’s ok.</p>
<h2 id="Tracking-Examples"><a href="#Tracking-Examples" class="headerlink" title="Tracking Examples"></a>Tracking Examples</h2><p>Now let’s look at some examples of events you can track.</p>
<h3 id="Email-Links"><a href="#Email-Links" class="headerlink" title="Email Links"></a>Email Links</h3><p>Use this to track when a user clicks on an email link.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:mail@server.com"</span>&gt;</span>Email the team!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'a[href^="mailto:"]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> email = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>).replace(<span class="string">"mailto:"</span>,<span class="string">""</span>);</div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Email'</span>, <span class="string">'Link Clicked'</span>, email);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Email</td>
<td>Link Clicked</td>
<td>mail@server.com</td>
</tr>
</tbody>
</table>
<h3 id="Social-Links"><a href="#Social-Links" class="headerlink" title="Social Links"></a>Social Links</h3><p>If you have social media “Share” links that you executing as part of JS, you could also track them through GA events.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-social-nav"</span> <span class="attr">data-social-nav</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-social</span>=<span class="string">"twitter"</span> <span class="attr">class</span>=<span class="string">"twitter"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon icon-twitter"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-social</span>=<span class="string">"facebook"</span> <span class="attr">class</span>=<span class="string">"facebook"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon icon-facebook"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'[data-social]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> shareType = $(<span class="keyword">this</span>).data(<span class="string">'social'</span>);</div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Share'</span>, <span class="string">'Link Clicked'</span>, shareType);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Share</td>
<td>Link Clicked</td>
<td>Facebook</td>
</tr>
</tbody>
</table>
<h3 id="Generic-Link"><a href="#Generic-Link" class="headerlink" title="Generic Link"></a>Generic Link</h3><p>Similar to the example above, a generic link tracking. This however also includes the text of the link, which could prove useful in determining which buttons on your site are resulting in the most clicks.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-ga-link</span> <span class="attr">href</span>=<span class="string">"/products"</span>&gt;</span>View products<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'[data-ga-link]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> linkText = $(<span class="keyword">this</span>).text();</div><div class="line">  <span class="keyword">var</span> linkDestination = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>);</div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Button'</span>, <span class="string">'Clicked'</span>, linkText + <span class="string">' -&gt; '</span> + linkDestination);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Button</td>
<td>Clicked</td>
<td>View products -&gt; /products</td>
</tr>
</tbody>
</table>
<h3 id="Header-Navigation"><a href="#Header-Navigation" class="headerlink" title="Header Navigation"></a>Header Navigation</h3><p>This is useful if you have some top-level header navigation that contains links, and you want to track the level of user interaction with these specific links.</p>
<p>If you have a footer, you can apply the same principle but using a separate data element, for example <code>ga-footer-links</code>.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">data-ga-header-links</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'[data-ga-header-links] a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> linkText = $(<span class="keyword">this</span>).text();</div><div class="line">  <span class="keyword">var</span> linkDestination = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>);</div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Header'</span>, <span class="string">'Link Clicked'</span>, linkText + <span class="string">' -&gt; '</span> + linkDestination);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Link Clicked</td>
<td>Products -&gt; /products</td>
</tr>
</tbody>
</table>
<h3 id="Client-side-interactions"><a href="#Client-side-interactions" class="headerlink" title="Client-side interactions"></a>Client-side interactions</h3><p>You don’t need to restrict your interaction tracking to just page links on the site. You may already have events setup on your site for particular types of functionality, for example a “Show More” button that reveals some hidden content on the page:</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-reveal</span>=<span class="string">"#my-hidden-content"</span>&gt;</span>Show More<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"my-hidden-content"</span> <span class="attr">class</span>=<span class="string">"hidden"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Additional content here... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'a[data-reveal]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $( $(<span class="keyword">this</span>).data(<span class="string">'reveal'</span>) ).removeClass(<span class="string">'hidden'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>You may be interested in tracking how many users are actually revealing that content. If you want to do this, don’t edit the previously defined event code that implements the reveal; it’s perfectly fine to have multiple events trigger when a button is clicked, and it is much neater to keep your analytics tracking code together in one place. Instead, you can just add another event:</p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'a[data-reveal]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> target = $(<span class="keyword">this</span>).data(<span class="string">'reveal'</span>);</div><div class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Show More'</span>, <span class="string">'Clicked'</span>, target);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>The tiny inefficiency here of multiple events is worth it to keep this code much more maintainable.</p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Show More</td>
<td>Clicked</td>
<td>#my-hidden-content</td>
</tr>
</tbody>
</table>
<h3 id="Scroll-Events"><a href="#Scroll-Events" class="headerlink" title="Scroll Events"></a>Scroll Events</h3><p>A simple page-load isn’t really enough to determine how much of your website a user is actually seeing when they visit. For example, are they just viewing the page and immediately leaving, or are they actually scrolling down to see more content? How many of your users do this?</p>
<p>To help capture this sort of information, you can track when and how far a user scrolls on a page. Whilst you can write this code yourself, there is already a small JS library that wraps up the functionality for you - <a href="http://scrolldepth.parsnip.io/" target="_blank" rel="noopener">Scroll Depth</a>.</p>
<p>By default, Scroll Depth tracks events for the <strong>percentage</strong> a user scrolls down the page - firing events at 25%, 50%, 75% and 100%. However, as well as customizing these percentages, you can also specify the IDs of elements on your page and it will fire tracking events when a user scrolls far enough down for that element to become visible. That’s great, as it tells you how many users are actually seeing a specific part of the page you have designed.</p>
<p>Once the script has been included, a typical way to invoke this library would be:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.scrollDepth(&#123;</div><div class="line">  <span class="attr">elements</span>: [<span class="string">'#products'</span>, <span class="string">'#buy-now'</span>, <span class="string">'#search-results'</span>]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Using the above skeleton script as an example, the ideal place to execute this would be straight after <code>_setTrackingEvents</code> is called.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This has been just a few simple examples of event tracking that you can implement on your site. With the flexibility of Javascript, you can create <em>way</em> more sophisticated events than those mentioned here. Hopefully the above provides a useful primer for you if you are just getting started with Google Analytics.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a short guide on putting together a simple-yet-powerful script for tracking custom events in Google Analytics. Whilst there &lt;strong&gt;is&lt;/strong&gt; already a ton of information on the web about Google Analytics and what you can achieve with it, this blog entry is aimed at devs who want to get going quickly with event tracking.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.kasaku.co.uk/tags/javascript/"/>
    
      <category term="analytics" scheme="https://www.kasaku.co.uk/tags/analytics/"/>
    
  </entry>
  
  <entry>
    <title>Referencing folders with Placeholder Settings</title>
    <link href="https://www.kasaku.co.uk/2014/12/23/referencing-folders-with-placeholder-settings/"/>
    <id>https://www.kasaku.co.uk/2014/12/23/referencing-folders-with-placeholder-settings/</id>
    <published>2014-12-23T14:01:42.000Z</published>
    <updated>2016-03-18T08:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.sitecore.net/Learn/Blogs/Technical-Blogs/Maximizing-Usability/Posts/2012/08/The-Power-of-Placeholder-Settings.aspx" target="_blank" rel="noopener">Placeholder Settings</a> allow you to choose what Renderings / Sublayouts you want to be selectable to add in to the placeholders of your layouts.</p>
<p>Each time you create a new Rendering, you need to update the placeholder settings too so that the editors can use the rendering. If you keep your renderings nicely organised within a folder structure, then there’s a simple method for making this a bit more flexible and having Sitecore automatically pick up the renderings by referencing a <em>folder of renderings</em> rather than the rendering itself.<br><a id="more"></a><br>Within the Content Editor for the settings, Sitecore allows you to add a rendering folder, rather than a rendering itself:</p>
<p><img src="/2014/12/23/referencing-folders-with-placeholder-settings/placeholder_settings.png" title="Placeholder settings"></p>

<p>Typically, selecting the folder would have no effect. However, with the following pipeline, we can alter the functionality of Sitecore so that if a folder has been added, it pulls in <strong>all</strong> of the child renderings that sit underneath it.</p>
<p>This can be very useful if you keep your renderings organised by functionality, so for example you want a “Forms” placeholders setting that will contain all of the Form renderings you have created. If you keep them together in the same folder, you can have them added automatically, without having to update the settings.</p>
<h3 id="Creating-the-pipeline-class"><a href="#Creating-the-pipeline-class" class="headerlink" title="Creating the pipeline class"></a>Creating the pipeline class</h3><p>The following is all the code we need for the pipeline step:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetRenderingsFromFolders</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">GetPlaceholderRenderingsArgs args</span>)</span></div><div class="line">    &#123;</div><div class="line">        Assert.IsNotNull((<span class="keyword">object</span>)args, <span class="string">"args"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (args.PlaceholderRenderings == <span class="literal">null</span> || args.PlaceholderRenderings.Count == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> newRenderings = args.PlaceholderRenderings</div><div class="line">            .Where(ItemIsAFolder)</div><div class="line">            .SelectMany(GetChildRenderings)</div><div class="line">            .Distinct(<span class="keyword">new</span> ItemIdComparer())</div><div class="line">            .ToList();</div><div class="line"></div><div class="line">        args.PlaceholderRenderings.AddRange(newRenderings);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ItemIsAFolder</span>(<span class="params">Item item</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> item.DerivesFromTemplate(ID.Parse(TemplateIds.Folder)) ||</div><div class="line">               item.DerivesFromTemplate(ID.Parse(TemplateIds.RenderingsFolder));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> IEnumerable&lt;Item&gt; <span class="title">GetChildRenderings</span>(<span class="params">Item item</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Can just return all children - the pipeline already handles only keeping hold of items</span></div><div class="line">        <span class="comment">// that are rendering items.</span></div><div class="line">        <span class="keyword">return</span> item.Children;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The code for this is relatively straight-forward. It makes use of a standard <code>DerivesFromTemplate</code> extension method that you’ll need to implement. There is also a static class used for ID references, but you could just drop the IDs straight in.</p>
<p>The GetChildRenderings method is actually extremely simple and could be removed, but it’s left in to illustrate that you could replace this with other logic, such as all descendants of an item, or perhaps using a parameter to determine what renderings to pick up.</p>
<h3 id="Adding-the-config"><a href="#Adding-the-config" class="headerlink" title="Adding the config"></a>Adding the config</h3><p>With this code in our solution, we need to add the command to config so that it can be referenced. This can done with a simple config file in the Include folder, with the appropriate assembly + class reference:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">xmlns:patch</span>=<span class="string">"http://www.sitecore.net/xmlconfig/"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">sitecore</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pipelines</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">getPlaceholderRenderings</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">processor</span> <span class="attr">type</span>=<span class="string">"YourWebsite.Sc.Pipelines.GetPlaceholderRenderings.GetRenderingsFromFolders, YourWebsite.Sc"</span></span></div><div class="line">                   <span class="attr">patch:after</span>=<span class="string">"*[@type='Sitecore.Pipelines.GetPlaceholderRenderings.GetAllowedRenderings, Sitecore.Kernel']"</span> /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">getPlaceholderRenderings</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pipelines</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">sitecore</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>And that’s it! You can now just reference folders in your Placeholder Settings and all of the child renderings underneath will be pulled in.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.sitecore.net/Learn/Blogs/Technical-Blogs/Maximizing-Usability/Posts/2012/08/The-Power-of-Placeholder-Settings.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Placeholder Settings&lt;/a&gt; allow you to choose what Renderings / Sublayouts you want to be selectable to add in to the placeholders of your layouts.&lt;/p&gt;
&lt;p&gt;Each time you create a new Rendering, you need to update the placeholder settings too so that the editors can use the rendering. If you keep your renderings nicely organised within a folder structure, then there’s a simple method for making this a bit more flexible and having Sitecore automatically pick up the renderings by referencing a &lt;em&gt;folder of renderings&lt;/em&gt; rather than the rendering itself.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title>Creating a customized root for the Content Editor</title>
    <link href="https://www.kasaku.co.uk/2014/12/12/creating-a-customized-root-for-the-content-editor/"/>
    <id>https://www.kasaku.co.uk/2014/12/12/creating-a-customized-root-for-the-content-editor/</id>
    <published>2014-12-12T11:08:34.000Z</published>
    <updated>2016-03-18T08:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some. As Sitecore 8 has all the editors ported to SPEAK, it is unlikely that this method will work from that version onwards.</em></p>
<p>Have you noticed how the <strong>Marketing Center</strong> icon in the Sitecore Start Menu is just used to load a new Content Editor window, but with a particular root item? In that particular case it goes straight to <code>/sitecore/system/Marketing Center</code>.<br><a id="more"></a><br>It’s quite a simple addition but can speed up work for your editors if they’re able to use an icon to launch straight into an area they regularly work with, especially if it’s tucked away in your content tree. Additionally, if you’ve removed access for them to one of the ancestor items, they won’t see it in the standard Content Editor tree at all, even if they have access to that particular descendant.</p>
<p>This short tutorial shows you how to create a new shortcut to launch a Content Editor with a customized root item of your choice.</p>
<h3 id="Creating-the-layout"><a href="#Creating-the-layout" class="headerlink" title="Creating the layout"></a>Creating the layout</h3><p>First of all, you’ll need to create a page that will get shown when the window opens. I have based the code for this Layout on the very same code used by the Marketing Center, no point in reinventing the wheel. All the code really does is launch the real Content Editor ASPX page, complete with some URL parameters to have it open the right item.</p>
<p>Create an ASPX page and fill it with the following, though replace the ID passed to <code>Client.ContentDatabase.GetItem</code> with the ID of the root item you want to be displayed when the window opens. You can also customize the <code>he</code> and <code>ic</code> parameters to give the new window a custom URL + icon.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">Page</span> <span class="attr">Language</span>=<span class="string">"C#"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">Import</span> <span class="attr">Namespace</span>=<span class="string">"Sitecore.Data.Items"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">Import</span> <span class="attr">Namespace</span>=<span class="string">"Sitecore.Diagnostics"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">Import</span> <span class="attr">Namespace</span>=<span class="string">"Sitecore.Text"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">Import</span> <span class="attr">Namespace</span>=<span class="string">"Sitecore"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"c#"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span><span class="undefined"></span></div><div class="line">  override protected void OnInit([NotNull] EventArgs e) &#123;</div><div class="line">    Assert.ArgumentNotNull(e, "e");</div><div class="line">    </div><div class="line">    var url = new UrlString("/sitecore/shell/Applications/Content Manager/default.aspx");</div><div class="line">    </div><div class="line">    // Get the root item to display in the Content Manager window.</div><div class="line">    Item rootItem = Client.ContentDatabase.GetItem("&#123;D6538613-BA3E-4C82-ACEC-94DC010BA2CD&#125;");</div><div class="line"></div><div class="line">    if (rootItem == null)</div><div class="line">      return;</div><div class="line">      </div><div class="line">    url.Add("he", "Blog Editor");</div><div class="line">    url.Add("pa", "0");</div><div class="line">    url.Add("ic", "people/16x16/user1_message.png");</div><div class="line">    url.Add("ro", rootItem.ID.ToString());</div><div class="line">    url["mo"] = "templateworkspace";</div><div class="line">    </div><div class="line">    Response.Redirect(url.ToString());   </div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Save this ASPX file where you like, you may prefer to go somewhere within the <code>/sitecore</code> folder, or perhaps the <code>/sitecore modules</code> folder instead to keep it separate.</p>
<p>Next, create a new Layout item in the Core database. I would recommend following Sitecore’s pattern and keeping it under the Applications folder located at <code>/sitecore/layout/Layouts/Applications</code>, or perhaps use a subfolder with your project name. The <code>Path</code> field of this layout should be a relative path to your new ASPX page.</p>
<h3 id="Creating-the-application"><a href="#Creating-the-application" class="headerlink" title="Creating the application"></a>Creating the application</h3><p>Now you need to create an <strong>Application</strong> that uses this layout. Create a new Application item under <code>/sitecore/content/Applications</code>, if you right-click on the Applications item you should find that an Insert Option has already been defined for adding an Application.</p>
<p>In this new item, set the <code>Chrome</code> field to <code>BorderlessChrome</code>, otherwise the window won’t display correctly. The <code>Icon</code> field will control how the Application will appear in the Start Menu later, use a 32x32 icon. You can also set the <code>Display Name</code> and <code>Tool Tip</code> fields.</p>
<p>Next, edit the <strong>Presentation Details</strong> of the item and set the layout to your newly created layout from the previous setup.</p>
<h3 id="Creating-the-shortcut"><a href="#Creating-the-shortcut" class="headerlink" title="Creating the shortcut"></a>Creating the shortcut</h3><p>Finally, you need to create the shortcut. Under <code>/sitecore/content/Documents and settings/All users/Start menu</code> are several items that represent the different areas of the Start Menu. Choose the one where you would like your icon to appear and create a new item of type <code>/sitecore/templates/Sitecore Client/Applications/Application shortcut</code> (you should find it as an Insert Option).</p>
<p>In the shortcut item, set the <code>Application</code> link field to point to your Application item. If you want a particular shortcut to override the default settings for an Application, you can also set the <code>Icon</code>, <code>Display Name</code> and <code>Tool tip</code> fields.</p>
<h3 id="Tada"><a href="#Tada" class="headerlink" title="Tada!"></a>Tada!</h3><p>That’s all there is to it, your new shortcut should be appearing in the Start Menu, and when you click it you’ll get your new customized Content Editor.</p>
<p><img src="/2014/12/12/creating-a-customized-root-for-the-content-editor/blog-shortcut.png" title="New blog shortcut"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some. As Sitecore 8 has all the editors ported to SPEAK, it is unlikely that this method will work from that version onwards.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Have you noticed how the &lt;strong&gt;Marketing Center&lt;/strong&gt; icon in the Sitecore Start Menu is just used to load a new Content Editor window, but with a particular root item? In that particular case it goes straight to &lt;code&gt;/sitecore/system/Marketing Center&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title>Creating a custom gutter validator</title>
    <link href="https://www.kasaku.co.uk/2014/12/08/creating-a-custom-gutter-validator/"/>
    <id>https://www.kasaku.co.uk/2014/12/08/creating-a-custom-gutter-validator/</id>
    <published>2014-12-08T14:07:59.000Z</published>
    <updated>2016-03-18T08:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some.</em></p>
<p>Whilst a lot of content editors using Sitecore prefer to use the Page Editor, the Content Editor still sees a lot of use. One of the features of the content editor is the gutter validators, used to quickly provide a visual check of the validation state of items in the tree:<br><a id="more"></a></p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/gutter-validator.png" title="Gutter Validator example"></p>

<p>It’s very easy to add your own custom validation here.</p>
<h3 id="Creating-the-code"><a href="#Creating-the-code" class="headerlink" title="Creating the code"></a>Creating the code</h3><p>First of all, create the code for your gutter validator. Create a new class and have it inherit from <code>Sitecore.Shell.Applications.ContentEditor.Gutters.GutterRenderer</code>. In this class you should override the <code>GetIconDescriptor(Item item)</code> method, which returns a <code>GutterIconDescriptor</code>.</p>
<p>This overriden method should return an instance of <code>GutterIconDescriptor</code> if the validation has failed, or null if the validation passes.</p>
<p>For the sake of example, here we have a validator that checks to see if an item has over 100 child items and if so will fail validation:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TooManyChildrenValidator</span> : <span class="title">GutterRenderer</span></div><div class="line"> &#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> GutterIconDescriptor <span class="title">GetIconDescriptor</span>(<span class="params">Item item</span>)</span></div><div class="line">    &#123;</div><div class="line">       Assert.ArgumentNotNull(item, <span class="string">"item"</span>);</div><div class="line">   </div><div class="line">       <span class="comment">// If the item isn't valid, return the validation error description,</span></div><div class="line">       <span class="comment">// otherwise return null.</span></div><div class="line">       <span class="keyword">return</span> !ItemIsValid(item) ? GetGutterDescriptor() : <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ItemIsValid</span>(<span class="params">Sitecore.Data.Items.Item item</span>)</span></div><div class="line">    &#123;</div><div class="line">       <span class="comment">// Item passes validation if it has 100 children or less</span></div><div class="line">       <span class="keyword">return</span> item.Children.Count() &amp;lt;= <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GutterIconDescriptor <span class="title">GetGutterDescriptor</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">       <span class="comment">// Return a new descriptor showing a warning icon and message</span></div><div class="line">       GutterIconDescriptor descriptor = <span class="keyword">new</span> GutterIconDescriptor();</div><div class="line">       descriptor.Icon = <span class="string">"Applications/16x16/information2.png"</span>;</div><div class="line">       descriptor.Tooltip = <span class="string">"This item has quite a lot of items underneath it and may affect Sitecore performance."</span>;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> descriptor;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>You can use the above code as a template, all you need to do is customize the <code>ItemIsValid</code> method with your own validation logic, and alter the <code>GetGutterDescriptor</code> method to choose an icon and tooltip that’s suitable for you.</p>
<p>That’s all there is too it for the code. Compile the assembly and make sure it is deployed to your Sitecore bin directory.</p>
<h3 id="Creating-the-Validation-Item"><a href="#Creating-the-Validation-Item" class="headerlink" title="Creating the Validation Item"></a>Creating the Validation Item</h3><p>Now you need to create an item for the gutter validator in Sitecore, so that it can be selected. This should be located in the Core database underneath the item <code>/sitecore/content/Applications/Content Editor/Gutters</code>.</p>
<p>You should create your item using the <code>/sitecore/templates/Sitecore Client/Content editor/Gutter Renderer</code> template.</p>
<p>The <code>Header</code> field represents how your validator will appear in the context-menu, and the <code>Type</code> field is the fully-qualified name of your new type:</p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/validator-editor.png" title="Gutter Validator fields"></p>

<h3 id="Trying-it-out"><a href="#Trying-it-out" class="headerlink" title="Trying it out"></a>Trying it out</h3><p>Once that’s saved you can jump back into the master database and enable it. Right-click in the gutter to enable your validator, and then you should see your validation icon wherever an item fails your validation:</p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/validator-effect.png" title="The effect of the new validator"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Whilst a lot of content editors using Sitecore prefer to use the Page Editor, the Content Editor still sees a lot of use. One of the features of the content editor is the gutter validators, used to quickly provide a visual check of the validation state of items in the tree:&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title>A RemoveLink command for PageEditor</title>
    <link href="https://www.kasaku.co.uk/2014/12/04/a-removelink-command-for-pageditor/"/>
    <id>https://www.kasaku.co.uk/2014/12/04/a-removelink-command-for-pageditor/</id>
    <published>2014-12-04T14:22:43.000Z</published>
    <updated>2016-03-18T08:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Something that has bugged me for quite some time in the Sitecore Page Editor, is the inability to <strong>remove</strong> a Link field once one has been set (<em>at least you cannot at the time of writing in Sitecore 7.5, perhaps 8 will alter this</em>).<br><a id="more"></a><br>As of 7.5 and before, you can only edit the link via the Page Editor, and in that dialog there is no way to remove the existing link:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/edit-link.png" title="Sitecore Edit Link dialog"></p>

<p>The only real way to remove the link is to shift over to the Content Editor and do it there. Whilst this works, if your editors are used to using the Page Editor it’s better if they can accomplish the task without navigating away.</p>
<p>Fortunately, it’s quite straight-forward to add a new command - one that clears any existing link in the field. Here’s the code for the command itself:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RemoveLink</span> : <span class="title">WebEditCommand</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">CommandContext context</span>)</span></div><div class="line">    &#123;</div><div class="line">        Assert.ArgumentNotNull(context, <span class="string">"context"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">string</span> formValue = WebUtil.GetFormValue(<span class="string">"scPlainValue"</span>);</div><div class="line">        context.Parameters.Add(<span class="string">"fieldValue"</span>, formValue);</div><div class="line"></div><div class="line">        Context.ClientPage.Start(<span class="keyword">this</span>, <span class="string">"Run"</span>, context.Parameters);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> Runs the specified args.</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="args"&gt;</span>The arguments.<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params">ClientPipelineArgs args</span>)</span></div><div class="line">    &#123;</div><div class="line">        Assert.ArgumentNotNull(args, <span class="string">"args"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(args.Parameters[<span class="string">"fieldValue"</span>]))</div><div class="line">        &#123;</div><div class="line">            SheerResponse.Alert(<span class="string">"There is no link to remove."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            SheerResponse.SetAttribute(<span class="string">"scHtmlValue"</span>, <span class="string">"value"</span>, GetDefaultText());</div><div class="line">            SheerResponse.SetAttribute(<span class="string">"scPlainValue"</span>, <span class="string">"value"</span>, String.Empty);</div><div class="line"></div><div class="line">            <span class="keyword">string</span> str = args.Parameters[<span class="string">"controlid"</span>];</div><div class="line"></div><div class="line">            ScriptInvokationBuilder invokationBuilder = <span class="keyword">new</span> ScriptInvokationBuilder(<span class="string">"scSetHtmlValue"</span>);</div><div class="line">            invokationBuilder.AddString(str);</div><div class="line">            invokationBuilder.Add(<span class="literal">false</span>);</div><div class="line">            invokationBuilder.Add(<span class="literal">true</span>);</div><div class="line"></div><div class="line">            SheerResponse.Eval(invokationBuilder.ToString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetDefaultText</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">using</span> (<span class="keyword">new</span> LanguageSwitcher(WebUtil.GetCookieValue(<span class="string">"shell"</span>, <span class="string">"lang"</span>, Context.Language.Name)))</div><div class="line">        &#123;</div><div class="line">            Database database = Factory.GetDatabase(<span class="string">"core"</span>);</div><div class="line">            Assert.IsNotNull(database, <span class="string">"core"</span>);</div><div class="line">            Item obj = database.GetItem(<span class="string">"/sitecore/content/Applications/WebEdit/WebEdit Texts"</span>);</div><div class="line">            Assert.IsNotNull(obj, <span class="string">"/sitecore/content/Applications/WebEdit/WebEdit Texts"</span>);</div><div class="line">            <span class="keyword">return</span> obj[<span class="string">"Default Text"</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This code has been adapted from the existing <code>EditLink</code> and <code>ClearImage</code> commands, to mimic their behaviour.</p>
<p>The execution is very simple - first of all it checks to see if the field currently has a value in it, preventing it from clearing an already empty field. This prevents the page from being marked as ‘dirty’ and the user being warned that changes have been made if they try to navigate away without saving. If you feel the alert message here is overkill for the user, it could be removed so that in that branch of the code, it simply does nothing.</p>
<p>If there <strong>is</strong> a value, this just returns a javascript function call to clear the value from the field.</p>
<p>With this code in our solution, we need to add the command to config so that it can be referenced. This can done with a simple config file in the Include folder, with the appropriate assembly + class reference:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">xmlns:patch</span>=<span class="string">"http://www.sitecore.net/xmlconfig/"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">sitecore</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">commands</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">command</span> <span class="attr">name</span>=<span class="string">"webedit:removelink"</span> <span class="attr">type</span>=<span class="string">"YourWebsite.Sc.Client.WebEdit.Commands.RemoveLink, YourWebsite.Sc.Client"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">commands</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">sitecore</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The last step is to create an Item in the Core database so that this command appears in the Page Editor for all Link Fields. In the folder at <code>/sitecore/system/Field types/Link Types/General Link/WebEdit Buttons</code>, add a new <code>WebEdit Button</code> item called <code>Remove Link</code>.</p>
<p>Within this item, set the appropriate fields to reference the command and choose a nice icon:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/remove-link-item.png" title="Remove Link fields"></p>

<p>With that in place, you will immediately see a new icon in the Page Editor:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/remove-link-demo.png" title="Remove Link in Page Editor"></p>

<p>And that’s it!</p>
<p>I hope that proves useful, it’s a pretty straight-forward solution. I do suspect though that this could be entirely accomplished through javascript, as there is little need for any server-side processing. Please leave a comment if you found this useful, or have any suggestions.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Something that has bugged me for quite some time in the Sitecore Page Editor, is the inability to &lt;strong&gt;remove&lt;/strong&gt; a Link field once one has been set (&lt;em&gt;at least you cannot at the time of writing in Sitecore 7.5, perhaps 8 will alter this&lt;/em&gt;).&lt;br&gt;
    
    </summary>
    
    
      <category term="sitecore" scheme="https://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
</feed>
