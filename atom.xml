<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kasaku]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://kasaku.local/"/>
  <updated>2015-06-04T16:25:46.836Z</updated>
  <id>http://kasaku.local/</id>
  
  <author>
    <name><![CDATA[Alex Washtell]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[An update for Sitecore 8]]></title>
    <link href="http://kasaku.local/2015/06/04/an-update-for-sitecore8/"/>
    <id>http://kasaku.local/2015/06/04/an-update-for-sitecore8/</id>
    <published>2015-06-04T16:00:00.000Z</published>
    <updated>2015-06-04T16:25:46.836Z</updated>
    <content type="html"><![CDATA[<p>Now that Sitecore 8 is out in the wild, developers will be eagerly checking their projects and modules to ensure compatibility with the latest version.</p>
<p>With that in mind, here’s an update on Sitecore 8 compatibility for recent blog posts on this site. This post collates all of the updates in one place, but each post has been updated as well:</p>
<h3 id="<!-￼0->"><a href="/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/" title="A RequiresDataSource filter for Sitecore Controller Renderings">A RequiresDataSource filter for Sitecore Controller Renderings</a></h3><p>The filter works absolutely fine in Sitecore 8 Update-2.</p>
<h3 id="<!-￼1->"></h3><p>The RemoveLink command still works in Sitecore 8, however you will need to target a different assembly to build it. Instead of the <strong>Sitecore.Client.dll</strong>, you must override <code>WebEditCommand</code> in <strong>Sitecore.ExperienceEditor.dll</strong>.</p>
<h3 id="<!-￼2->"><a href="/2014/12/08/creating-a-custom-gutter-validator/" title="Creating a custom gutter validator">Creating a custom gutter validator</a></h3><p>No changes are required, this technique works absolutely fine in Sitecore 8 Update-2.</p>
<h3 id="<!-￼3->"><a href="/2014/12/12/creating-a-customized-root-for-the-content-editor/" title="Creating a customized root for the Content Editor">Creating a customized root for the Content Editor</a></h3><p>This approach still works for Sitecore 8. However, a better approach is to now create a link in the Launchpad, rather than the “Start” menu.</p>
<h3 id="<!-￼4->"><a href="/2014/12/23/referencing-folders-with-placeholder-settings/" title="Referencing folders with Placeholder Settings">Referencing folders with Placeholder Settings</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<p>Now that Sitecore 8 is out in the wild, developers will be eagerly checking their projects and modules to ensure compatibility with the l]]>
    </summary>
    
      <category term="sitecore" scheme="http://kasaku.local/tags/sitecore/"/>
    
      <category term="sitecore-8" scheme="http://kasaku.local/tags/sitecore-8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Referencing folders with Placeholder Settings]]></title>
    <link href="http://kasaku.local/2014/12/23/referencing-folders-with-placeholder-settings/"/>
    <id>http://kasaku.local/2014/12/23/referencing-folders-with-placeholder-settings/</id>
    <published>2014-12-23T14:01:42.000Z</published>
    <updated>2015-06-04T16:04:23.666Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.sitecore.net/Learn/Blogs/Technical-Blogs/Maximizing-Usability/Posts/2012/08/The-Power-of-Placeholder-Settings.aspx" target="_blank" rel="external">Placeholder Settings</a> allow you to choose what Renderings / Sublayouts you want to be selectable to add in to the placeholders of your layouts.</p>
<p>Each time you create a new Rendering, you need to update the placeholder settings too so that the editors can use the rendering. If you keep your renderings nicely organised within a folder structure, then there’s a simple method for making this a bit more flexible and having Sitecore automatically pick up the renderings by referencing a <em>folder of renderings</em> rather than the rendering itself.</p>
<p>Within the Content Editor for the settings, Sitecore allows you to add a rendering folder, rather than a rendering itself:</p>
<p><img src="/2014/12/23/referencing-folders-with-placeholder-settings/placeholder_settings.png" alt="Placeholder settings" title="Placeholder settings"></p>

<p>Typically, selecting the folder would have no effect. However, with the following pipeline, we can alter the functionality of Sitecore so that if a folder has been added, it pulls in <strong>all</strong> of the child renderings that sit underneath it.</p>
<p>This can be very useful if you keep your renderings organised by functionality, so for example you want a “Forms” placeholders setting that will contain all of the Form renderings you have created. If you keep them together in the same folder, you can have them added automatically, without having to update the settings.</p>
<h3 id="Creating_the_pipeline_class">Creating the pipeline class</h3><p>The following is all the code we need for the pipeline step:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetRenderingsFromFolders</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">GetPlaceholderRenderingsArgs args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Assert.IsNotNull((<span class="keyword">object</span>)args, <span class="string">"args"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.PlaceholderRenderings == <span class="keyword">null</span> || args.PlaceholderRenderings.Count == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newRenderings = args.PlaceholderRenderings</span><br><span class="line">            .Where(ItemIsAFolder)</span><br><span class="line">            .SelectMany(GetChildRenderings)</span><br><span class="line">            .Distinct(<span class="keyword">new</span> ItemIdComparer())</span><br><span class="line">            .ToList();</span><br><span class="line"></span><br><span class="line">        args.PlaceholderRenderings.AddRange(newRenderings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ItemIsAFolder</span>(<span class="params">Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.DerivesFromTemplate(ID.Parse(TemplateIds.Folder)) ||</span><br><span class="line">               item.DerivesFromTemplate(ID.Parse(TemplateIds.RenderingsFolder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerable&lt;Item&gt; <span class="title">GetChildRenderings</span>(<span class="params">Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Can just return all children - the pipeline already handles only keeping hold of items</span></span><br><span class="line">        <span class="comment">// that are rendering items.</span></span><br><span class="line">        <span class="keyword">return</span> item.Children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code for this is relatively straight-forward. It makes use of a standard <code>DerivesFromTemplate</code> extension method that you’ll need to implement. There is also a static class used for ID references, but you could just drop the IDs straight in.</p>
<p>The GetChildRenderings method is actually extremely simple and could be removed, but it’s left in to illustrate that you could replace this with other logic, such as all descendants of an item, or perhaps using a parameter to determine what renderings to pick up.</p>
<h3 id="Adding_the_config">Adding the config</h3><p>With this code in our solution, we need to add the command to config so that it can be referenced. This can done with a simple config file in the Include folder, with the appropriate assembly + class reference:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span> <span class="attribute">xmlns:patch</span>=<span class="value">"http://www.sitecore.net/xmlconfig/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">sitecore</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pipelines</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">getPlaceholderRenderings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">processor</span> <span class="attribute">type</span>=<span class="value">"YourWebsite.Sc.Pipelines.GetPlaceholderRenderings.GetRenderingsFromFolders, YourWebsite.Sc"</span></span><br><span class="line">                   <span class="attribute">patch:after</span>=<span class="value">"*[@type='Sitecore.Pipelines.GetPlaceholderRenderings.GetAllowedRenderings, Sitecore.Kernel']"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">getPlaceholderRenderings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">pipelines</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">sitecore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>And that’s it! You can now just reference folders in your Placeholder Settings and all of the child renderings underneath will be pulled in.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.sitecore.net/Learn/Blogs/Technical-Blogs/Maximizing-Usability/Posts/2012/08/The-Power-of-Placeholder-Settings.aspx" t]]>
    </summary>
    
      <category term="sitecore" scheme="http://kasaku.local/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating a customized root for the Content Editor]]></title>
    <link href="http://kasaku.local/2014/12/12/creating-a-customized-root-for-the-content-editor/"/>
    <id>http://kasaku.local/2014/12/12/creating-a-customized-root-for-the-content-editor/</id>
    <published>2014-12-12T11:08:34.000Z</published>
    <updated>2015-06-04T15:59:51.571Z</updated>
    <content type="html"><![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some. As Sitecore 8 has all the editors ported to SPEAK, it is unlikely that this method will work from that version onwards.</em></p>
<p>Have you noticed how the <strong>Marketing Center</strong> icon in the Sitecore Start Menu is just used to load a new Content Editor window, but with a particular root item? In that particular case it goes straight to <code>/sitecore/system/Marketing Center</code>.</p>
<p>It’s quite a simple addition but can speed up work for your editors if they’re able to use an icon to launch straight into an area they regularly work with, especially if it’s tucked away in your content tree. Additionally, if you’ve removed access for them to one of the ancestor items, they won’t see it in the standard Content Editor tree at all, even if they have access to that particular descendant.</p>
<p>This short tutorial shows you how to create a new shortcut to launch a Content Editor with a customized root item of your choice.</p>
<h3 id="Creating_the_layout">Creating the layout</h3><p>First of all, you’ll need to create a page that will get shown when the window opens. I have based the code for this Layout on the very same code used by the Marketing Center, no point in reinventing the wheel. All the code really does is launch the real Content Editor ASPX page, complete with some URL parameters to have it open the right item.</p>
<p>Create an ASPX page and fill it with the following, though replace the ID passed to <code>Client.ContentDatabase.GetItem</code> with the ID of the root item you want to be displayed when the window opens. You can also customize the <code>he</code> and <code>ic</code> parameters to give the new window a custom URL + icon.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Page</span> <span class="attribute">Language</span>=<span class="value">"C#"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore.Data.Items"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore.Diagnostics"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore.Text"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">language</span>=<span class="value">"c#"</span> <span class="attribute">runat</span>=<span class="value">"server"</span>&gt;</span><span class="openscad"></span><br><span class="line">  override protected void OnInit<span class="params">([NotNull] EventArgs e)</span> &#123;</span><br><span class="line">    Assert.ArgumentNotNull<span class="params">(e, <span class="string">"e"</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    var url = new UrlString<span class="params">(<span class="string">"/sitecore/shell/Applications/Content Manager/default.aspx"</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Get the root item to display in the Content Manager window.</span></span><br><span class="line">    Item rootItem = Client.ContentDatabase.GetItem<span class="params">(<span class="string">"&#123;D6538613-BA3E-4C82-ACEC-94DC010BA2CD&#125;"</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(rootItem == null)</span></span><br><span class="line">      return;</span><br><span class="line">      </span><br><span class="line">    url.Add<span class="params">(<span class="string">"he"</span>, <span class="string">"Blog Editor"</span>)</span>;</span><br><span class="line">    url.Add<span class="params">(<span class="string">"pa"</span>, <span class="string">"0"</span>)</span>;</span><br><span class="line">    url.Add<span class="params">(<span class="string">"ic"</span>, <span class="string">"people/16x16/user1_message.png"</span>)</span>;</span><br><span class="line">    url.Add<span class="params">(<span class="string">"ro"</span>, rootItem.ID.ToString<span class="params">()</span>)</span>;</span><br><span class="line">    url[<span class="string">"mo"</span>] = <span class="string">"templateworkspace"</span>;</span><br><span class="line">    </span><br><span class="line">    Response.Redirect<span class="params">(url.ToString<span class="params">()</span>)</span>;   </span><br><span class="line">  &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Save this ASPX file where you like, you may prefer to go somewhere within the <code>/sitecore</code> folder, or perhaps the <code>/sitecore modules</code> folder instead to keep it separate.</p>
<p>Next, create a new Layout item in the Core database. I would recommend following Sitecore’s pattern and keeping it under the Applications folder located at <code>/sitecore/layout/Layouts/Applications</code>, or perhaps use a subfolder with your project name. The <code>Path</code> field of this layout should be a relative path to your new ASPX page.</p>
<h3 id="Creating_the_application">Creating the application</h3><p>Now you need to create an <strong>Application</strong> that uses this layout. Create a new Application item under <code>/sitecore/content/Applications</code>, if you right-click on the Applications item you should find that an Insert Option has already been defined for adding an Application.</p>
<p>In this new item, set the <code>Chrome</code> field to <code>BorderlessChrome</code>, otherwise the window won’t display correctly. The <code>Icon</code> field will control how the Application will appear in the Start Menu later, use a 32x32 icon. You can also set the <code>Display Name</code> and <code>Tool Tip</code> fields.</p>
<p>Next, edit the <strong>Presentation Details</strong> of the item and set the layout to your newly created layout from the previous setup.</p>
<h3 id="Creating_the_shortcut">Creating the shortcut</h3><p>Finally, you need to create the shortcut. Under <code>/sitecore/content/Documents and settings/All users/Start menu</code> are several items that represent the different areas of the Start Menu. Choose the one where you would like your icon to appear and create a new item of type <code>/sitecore/templates/Sitecore Client/Applications/Application shortcut</code> (you should find it as an Insert Option).</p>
<p>In the shortcut item, set the <code>Application</code> link field to point to your Application item. If you want a particular shortcut to override the default settings for an Application, you can also set the <code>Icon</code>, <code>Display Name</code> and <code>Tool tip</code> fields.</p>
<h3 id="Tada!">Tada!</h3><p>That’s all there is to it, your new shortcut should be appearing in the Start Menu, and when you click it you’ll get your new customized Content Editor.</p>
<p><img src="/2014/12/12/creating-a-customized-root-for-the-content-editor/blog-shortcut.png" alt="New blog shortcut" title="New blog shortcut"></p>]]></content>
    <summary type="html">
    <![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Si]]>
    </summary>
    
      <category term="sitecore" scheme="http://kasaku.local/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating a custom gutter validator]]></title>
    <link href="http://kasaku.local/2014/12/08/creating-a-custom-gutter-validator/"/>
    <id>http://kasaku.local/2014/12/08/creating-a-custom-gutter-validator/</id>
    <published>2014-12-08T14:07:59.000Z</published>
    <updated>2015-06-04T16:01:09.000Z</updated>
    <content type="html"><![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some.</em></p>
<p>Whilst a lot of content editors using Sitecore prefer to use the Page Editor, the Content Editor still sees a lot of use. One of the features of the content editor is the gutter validators, used to quickly provide a visual check of the validation state of items in the tree:</p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/gutter-validator.png" alt="Gutter Validator example" title="Gutter Validator example"></p>

<p>It’s very easy to add your own custom validation here.</p>
<h3 id="Creating_the_code">Creating the code</h3><p>First of all, create the code for your gutter validator. Create a new class and have it inherit from <code>Sitecore.Shell.Applications.ContentEditor.Gutters.GutterRenderer</code>. In this class you should override the <code>GetIconDescriptor(Item item)</code> method, which returns a <code>GutterIconDescriptor</code>.</p>
<p>This overriden method should return an instance of <code>GutterIconDescriptor</code> if the validation has failed, or null if the validation passes.</p>
<p>For the sake of example, here we have a validator that checks to see if an item has over 100 child items and if so will fail validation:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TooManyChildrenValidator</span> : <span class="title">GutterRenderer</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> GutterIconDescriptor <span class="title">GetIconDescriptor</span>(<span class="params">Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">       Assert.ArgumentNotNull(item, <span class="string">"item"</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// If the item isn't valid, return the validation error description,</span></span><br><span class="line">       <span class="comment">// otherwise return null.</span></span><br><span class="line">       <span class="keyword">return</span> !ItemIsValid(item) ? GetGutterDescriptor() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ItemIsValid</span>(<span class="params">Sitecore.Data.Items.Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">       <span class="comment">// Item passes validation if it has 100 children or less</span></span><br><span class="line">       <span class="keyword">return</span> item.Children.Count() &amp;lt;= <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GutterIconDescriptor <span class="title">GetGutterDescriptor</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">       <span class="comment">// Return a new descriptor showing a warning icon and message</span></span><br><span class="line">       GutterIconDescriptor descriptor = <span class="keyword">new</span> GutterIconDescriptor();</span><br><span class="line">       descriptor.Icon = <span class="string">"Applications/16x16/information2.png"</span>;</span><br><span class="line">       descriptor.Tooltip = <span class="string">"This item has quite a lot of items underneath it and may affect Sitecore performance."</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> descriptor;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>You can use the above code as a template, all you need to do is customize the <code>ItemIsValid</code> method with your own validation logic, and alter the <code>GetGutterDescriptor</code> method to choose an icon and tooltip that’s suitable for you.</p>
<p>That’s all there is too it for the code. Compile the assembly and make sure it is deployed to your Sitecore bin directory.</p>
<h3 id="Creating_the_Validation_Item">Creating the Validation Item</h3><p>Now you need to create an item for the gutter validator in Sitecore, so that it can be selected. This should be located in the Core database underneath the item <code>/sitecore/content/Applications/Content Editor/Gutters</code>.</p>
<p>You should create your item using the <code>/sitecore/templates/Sitecore Client/Content editor/Gutter Renderer</code> template.</p>
<p>The <code>Header</code> field represents how your validator will appear in the context-menu, and the <code>Type</code> field is the fully-qualified name of your new type:</p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/validator-editor.png" alt="Gutter Validator fields" title="Gutter Validator fields"></p>

<h3 id="Trying_it_out">Trying it out</h3><p>Once that’s saved you can jump back into the master database and enable it. Right-click in the gutter to enable your validator, and then you should see your validation icon wherever an item fails your validation:</p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/validator-effect.png" alt="The effect of the new validator" title="The effect of the new validator"></p>]]></content>
    <summary type="html">
    <![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Si]]>
    </summary>
    
      <category term="sitecore" scheme="http://kasaku.local/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A RemoveLink command for PageEditor]]></title>
    <link href="http://kasaku.local/2014/12/04/a-removelink-command-for-pageditor/"/>
    <id>http://kasaku.local/2014/12/04/a-removelink-command-for-pageditor/</id>
    <published>2014-12-04T14:22:43.000Z</published>
    <updated>2015-06-04T15:53:18.998Z</updated>
    <content type="html"><![CDATA[<p>Something that has bugged me for quite some time in the Sitecore Page Editor, is the inability to <strong>remove</strong> a Link field once one has been set (<em>at least you cannot at the time of writing in Sitecore 7.5, perhaps 8 will alter this</em>).<br><a id="more"></a><br>As of 7.5 and before, you can only edit the link via the Page Editor, and in that dialog there is no way to remove the existing link:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/edit-link.png" alt="Sitecore Edit Link dialog" title="Sitecore Edit Link dialog"></p>

<p>The only real way to remove the link is to shift over to the Content Editor and do it there. Whilst this works, if your editors are used to using the Page Editor it’s better if they can accomplish the task without navigating away.</p>
<p>Fortunately, it’s quite straight-forward to add a new command - one that clears any existing link in the field. Here’s the code for the command itself:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RemoveLink</span> : <span class="title">WebEditCommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">CommandContext context</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Assert.ArgumentNotNull(context, <span class="string">"context"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> formValue = WebUtil.GetFormValue(<span class="string">"scPlainValue"</span>);</span><br><span class="line">        context.Parameters.Add(<span class="string">"fieldValue"</span>, formValue);</span><br><span class="line"></span><br><span class="line">        Context.ClientPage.Start(<span class="keyword">this</span>, <span class="string">"Run"</span>, context.Parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> Runs the specified args.</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="args"&gt;</span>The arguments.<span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params">ClientPipelineArgs args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Assert.ArgumentNotNull(args, <span class="string">"args"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(args.Parameters[<span class="string">"fieldValue"</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            SheerResponse.Alert(<span class="string">"There is no link to remove."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SheerResponse.SetAttribute(<span class="string">"scHtmlValue"</span>, <span class="string">"value"</span>, GetDefaultText());</span><br><span class="line">            SheerResponse.SetAttribute(<span class="string">"scPlainValue"</span>, <span class="string">"value"</span>, String.Empty);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> str = args.Parameters[<span class="string">"controlid"</span>];</span><br><span class="line"></span><br><span class="line">            ScriptInvokationBuilder invokationBuilder = <span class="keyword">new</span> ScriptInvokationBuilder(<span class="string">"scSetHtmlValue"</span>);</span><br><span class="line">            invokationBuilder.AddString(str);</span><br><span class="line">            invokationBuilder.Add(<span class="keyword">false</span>);</span><br><span class="line">            invokationBuilder.Add(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            SheerResponse.Eval(invokationBuilder.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetDefaultText</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">new</span> LanguageSwitcher(WebUtil.GetCookieValue(<span class="string">"shell"</span>, <span class="string">"lang"</span>, Context.Language.Name)))</span><br><span class="line">        &#123;</span><br><span class="line">            Database database = Factory.GetDatabase(<span class="string">"core"</span>);</span><br><span class="line">            Assert.IsNotNull(database, <span class="string">"core"</span>);</span><br><span class="line">            Item obj = database.GetItem(<span class="string">"/sitecore/content/Applications/WebEdit/WebEdit Texts"</span>);</span><br><span class="line">            Assert.IsNotNull(obj, <span class="string">"/sitecore/content/Applications/WebEdit/WebEdit Texts"</span>);</span><br><span class="line">            <span class="keyword">return</span> obj[<span class="string">"Default Text"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This code has been adapted from the existing <code>EditLink</code> and <code>ClearImage</code> commands, to mimic their behaviour.</p>
<p>The execution is very simple - first of all it checks to see if the field currently has a value in it, preventing it from clearing an already empty field. This prevents the page from being marked as ‘dirty’ and the user being warned that changes have been made if they try to navigate away without saving. If you feel the alert message here is overkill for the user, it could be removed so that in that branch of the code, it simply does nothing.</p>
<p>If there <strong>is</strong> a value, this just returns a javascript function call to clear the value from the field.</p>
<p>With this code in our solution, we need to add the command to config so that it can be referenced. This can done with a simple config file in the Include folder, with the appropriate assembly + class reference:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span> <span class="attribute">xmlns:patch</span>=<span class="value">"http://www.sitecore.net/xmlconfig/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">sitecore</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">commands</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">command</span> <span class="attribute">name</span>=<span class="value">"webedit:removelink"</span> <span class="attribute">type</span>=<span class="value">"YourWebsite.Sc.Client.WebEdit.Commands.RemoveLink, YourWebsite.Sc.Client"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">commands</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">sitecore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The last step is to create an Item in the Core database so that this command appears in the Page Editor for all Link Fields. In the folder at <code>/sitecore/system/Field types/Link Types/General Link/WebEdit Buttons</code>, add a new <code>WebEdit Button</code> item called <code>Remove Link</code>.</p>
<p>Within this item, set the appropriate fields to reference the command and choose a nice icon:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/remove-link-item.png" alt="Remove Link fields" title="Remove Link fields"></p>

<p>With that in place, you will immediately see a new icon in the Page Editor:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/remove-link-demo.png" alt="Remove Link in Page Editor" title="Remove Link in Page Editor"></p>

<p>And that’s it!</p>
<p>I hope that proves useful, it’s a pretty straight-forward solution. I do suspect though that this could be entirely accomplished through javascript, as there is little need for any server-side processing. Please leave a comment if you found this useful, or have any suggestions.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Something that has bugged me for quite some time in the Sitecore Page Editor, is the inability to <strong>remove</strong> a Link field once one has been set (<em>at least you cannot at the time of writing in Sitecore 7.5, perhaps 8 will alter this</em>).<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://kasaku.local/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A RequiresDataSource filter for Sitecore Controller Renderings]]></title>
    <link href="http://kasaku.local/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/"/>
    <id>http://kasaku.local/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/</id>
    <published>2014-11-13T22:59:55.000Z</published>
    <updated>2015-06-04T15:55:44.270Z</updated>
    <content type="html"><![CDATA[<p>A common requirement when creating components in Sitecore is for the component to rely on data being supplied via the DataSource. Whilst you can try your best to ensure that a DataSource is associated with a component, there will inevitably be occasions when that DataSource gets deleted or moved and ultimately isn’t provided to the component at the time of rendering.<br><a id="more"></a><br>What can work well in these occasions is to provide the content editor with some feedback that the component won’t function correctly, so that they know they shouldn’t publish the page in its current state.</p>
<p>In Sitecore Controller Renderings, this could be done through some code at the top of each rendering action, checking for a DataSource and acting accordingly if one wasn’t found. However, rather than write repetitve code in each rendering, a better method is to make use of a reusable <a href="http://msdn.microsoft.com/en-us/library/dd410209%28v=vs.100%29.aspx" target="_blank" rel="external">ActionFilter</a>.</p>
<p>When the ActionFilter is executed, it attempts to locate a DataSource within the current RenderingContext. If no DataSource is found, then a PartialView is returned and the action will not continue to execute.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class RequiresDataSource : FilterAttribute, IActionFilter</span><br><span class="line">&#123;</span><br><span class="line">  private const string DefaultNoDataSourceView = "_NoDataSource";</span><br><span class="line">  </span><br><span class="line">  protected Item DataSourceItem &#123; get; set; &#125;</span><br><span class="line">  </span><br><span class="line">  public virtual void OnActionExecuting(ActionExecutingContext filterContext)</span><br><span class="line">  &#123;</span><br><span class="line">    DataSourceItem = GetDataSourceItem();</span><br><span class="line">    </span><br><span class="line">    if (DataSourceItem == null)</span><br><span class="line">    &#123;</span><br><span class="line">      filterContext.Result = new PartialViewResult</span><br><span class="line">      &#123;</span><br><span class="line">        ViewName = NoDataSourceView ?? DefaultNoDataSourceView</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  private Item GetDataSourceItem()</span><br><span class="line">  &#123;</span><br><span class="line">    if (RenderingContext.Current == null || RenderingContext.Current.Rendering == null || </span><br><span class="line">        string.IsNullOrEmpty(RenderingContext.Current.Rendering.DataSource))</span><br><span class="line">    &#123;</span><br><span class="line">       return null;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    // A DataSource has at least been set. Now to find out if it is an actual item.</span><br><span class="line">    return Sitecore.Context.Database.GetItem(RenderingContext.Current.Rendering.DataSource);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void OnActionExecuted(ActionExecutedContext filterContext)</span><br><span class="line">  &#123;</span><br><span class="line">    // Not required.</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public string NoDataSourceView &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With this attribute created, you can assign it to an action:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[RequiresDataSource]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">HomepageCarousel</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="comment">// Controller rendering code goes here...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> PartialView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can also assign it to a controller if you want it to execute for <strong>every</strong> action within that controller.</p>
<p>If you don’t specify a view, the default will be used. However, if you need to specify a particular view for a given rendering, you can:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[RequiresDataSource(NoDataSourceView=<span class="string">"_NoDataSourceCustom"</span>)]</span><br></pre></td></tr></table></figure>
<p>What do you put in the view? That is completly up to what is necessary in your solution - however a good strategy is to provide a simple error message to a user using the PageEditor, but actually render nothing if the component still makes it to the published page without a DataSource:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@if (PageMode.IsPageEditor)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"error"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Heads up!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This component requires a DataSource but one has not been specified.</span><br><span class="line">    If this page is published in its current state, this component will be empty.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, if the component is viewed within the Page Editor, and no DataSource has been set, the user will see an informative message:</p>
<p><img src="/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/DS_Required.png" alt="No DataSource example" title="No DataSource example"></p>

<p>As well as provided the user with some feedback, it has removed the need for the null-checking that would have otherwise been required in the action to prevent exceptions, we’re now guaranteed that the code will only be executed if a DataSource has been set.</p>
<h3 id="Extending_the_attribute">Extending the attribute</h3><p>To provide the user with some more specific feedback, and also to ensure that our code only executes if the <strong>correct</strong> type of DataSource has been applied, we can extend the attribute to create another.</p>
<p>The <code>RequiresDataSourceOfTemplate</code> attribute shown below adds an additional check that occurs <em>if</em> the DataSource has been set, whereupon it additionally confirms that the DataSource is of the right template:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RequiresDataSourceOfTemplate</span> : <span class="title">RequiresDataSource</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> DefaultInvalidDataSourceView = <span class="string">"_InvalidDataSource"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> Guid _templateId;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RequiresDataSourceOfTemplate</span>(<span class="params">Guid templateId</span>)</span><br><span class="line">  </span>&#123;</span><br><span class="line">    _templateId = templateId;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span><br><span class="line">  </span>&#123;</span><br><span class="line">    <span class="keyword">base</span>.OnActionExecuting(filterContext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Only continue if we have a datasource, i.e. the base action didn't result in anything.</span></span><br><span class="line">    <span class="keyword">if</span> (DataSourceItem != <span class="keyword">null</span> &amp;&amp; !DataSourceItem.DerivesFromTemplate(_templateId))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> correctTemplateItem = Sitecore.Context.Database.GetItem(_templateId.ToID());</span><br><span class="line">      </span><br><span class="line">      filterContext.Result = <span class="keyword">new</span> PartialViewResult</span><br><span class="line">      &#123;</span><br><span class="line">        ViewData = &#123; </span><br><span class="line">          &#123;<span class="string">"RequiredTemplateName"</span>, correctTemplateItem.Name &#125;, </span><br><span class="line">          &#123;<span class="string">"FoundTemplateName"</span>, DataSourceItem.TemplateName&#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        ViewName = InvalidDataSourceView ?? DefaultInvalidDataSourceView</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> InvalidDataSourceView &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This time, as well as returning an alternate view, some additional metadata is pushed into the ViewData. That allows us to provde create a view that provides the user with a bit of information about what went wrong:</p>
<p><img src="/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/DS_Invalid.png" alt="Invalid DataSource example" title="Invalid DataSource example"></p>

<p>Once you have these attributes, you can decorate all of your actions that rely on DataSources with them. This will eliminate a lot of common code needing to be rewritten across these actions, so instead your actions can focus on just delivering the right content with the correct DataSources in place.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A common requirement when creating components in Sitecore is for the component to rely on data being supplied via the DataSource. Whilst you can try your best to ensure that a DataSource is associated with a component, there will inevitably be occasions when that DataSource gets deleted or moved and ultimately isn’t provided to the component at the time of rendering.<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://kasaku.local/tags/sitecore/"/>
    
      <category term="sitecore-mvc" scheme="http://kasaku.local/tags/sitecore-mvc/"/>
    
  </entry>
  
</feed>