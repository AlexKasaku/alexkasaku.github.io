<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kasaku]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.kasaku.co.uk/"/>
  <updated>2016-03-21T20:40:12.060Z</updated>
  <id>http://www.kasaku.co.uk/</id>
  
  <author>
    <name><![CDATA[Alex Washtell]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Multi-Line field bugs in Sitecore 8.1]]></title>
    <link href="http://www.kasaku.co.uk/2016/03/21/multiline-field-bugs-in-sitecore-8-1/"/>
    <id>http://www.kasaku.co.uk/2016/03/21/multiline-field-bugs-in-sitecore-8-1/</id>
    <published>2016-03-21T14:00:00.000Z</published>
    <updated>2016-03-21T20:40:12.060Z</updated>
    <content type="html"><![CDATA[<p>If you’re using Multi-Line fields in Sitecore, as of Sitecore 8.1 Update 1 you will encounter problems with using them when editing content in the Experience Editor.</p>
<p>These two bugs are:</p>
<ol>
<li>When you create a new line in the field, the Experience Editor will actually add two new line breaks instead of one.</li>
<li>When you save, all lines except for the first are not saved.<a id="more"></a>
</li>
</ol>
<p>Here is a demo illustrating both issues:</p>
<p></p><p><img src="/2016/03/21/multiline-field-bugs-in-sitecore-8-1/multi-line-bug.gif" alt="Bug demo" title="Bug demo"></p><br>Both of these issues have been reported to Sitecore Support. Here’s a bit more information on each:<p></p>
<h2 id="Additional-lines_bug">Additional-lines bug</h2><p>This bug is down to the <code>FieldChromeType.js</code> file used in the front-end to provide the editing functionality for the fields. It is incorrectly adding in two <code>&lt;br&gt;</code> tags into the HTML when a new-line is created.</p>
<p>This issue has been reported to Sitecore Support and has been confirmed as a bug. If you have need to reference this bug in a support ticket with Sitecore, the public reference number is <strong>103584</strong>.</p>
<p>Sitecore Support have supplied an updated version of the JS file that fixes the issue. You can get this file from Support if you reference the above number, also if you log this issue it will help inform Sitecore of how wide-affecting the issue is.</p>
<p>I have also <a href="/2016/03/21/multiline-field-bugs-in-sitecore-8-1/FieldChromeType.js" title="hosted the file here">hosted the file here</a> on this site for your convenience. By using this file you accept responsibility for doing so, and I <strong>strongly recommend</strong> you compare this file to the one you are replacing in your solution to confirm what you are changing, as well as still reporting to Sitecore Support that you encountered the bug.</p>
<p>To apply the fix, just place the updated file in <code>\sitecore\shell\Applications\Page Modes\ChromeTypes</code>, replacing the existing file.</p>
<p>Note that this fix is for 8.1 Update 1 and Update 2 <strong>only</strong>.</p>
<h2 id="Save_bug">Save bug</h2><p>In Sitecore 8.1 Update 1, the <code>Sitecore.ExperienceEditor.WebUtilty</code> class was updated to amend the regex that is used to process fields before they are saved. Unfortunately, the new regex in place is too hungry and matches across all <code>&lt;br&gt;</code> tags, removing them along with all the content inbetween. The result is that only the first line remains.</p>
<p>This issue has been reported to Sitecore Support and has been confirmed as a bug. If you are looking for information on this bug, the public reference number is <strong>101295</strong>. This problem also affects the recently released Update 2.</p>
<p>Unfortuntely, the <code>WebUtility</code> class is static and as such it’s not trivial to implement a replacement for this class. There are no references to it in configuration allowing it to be swapped out with an alternative.</p>
<p>The workaround suggestion by Support at the moment is to use a Rich-Text field.</p>
<p>Alternatively, and the route we have gone, is to remove the ability to edit this field in the Experience Editor and to have our users make the update to this field in the Content Editor. As this was just a single field that is only used on a handful of items, that worked well enough for us. However, if you make extensive use of the Multi-Line field and Experience Editor, you may need to investigate a more robust workaround. If you have done this, please comment below!</p>
<h2 id="Related_bugs">Related bugs</h2><p>Kayee has written a blog post on a very similar bug that also effects the Multi-Line field in the Experience Editor, though in that scenario it’s if you are using it combined with a Custom Experience Button.</p>
<p>Fortunately, that bug has fix available for it. You can see a demo of the bug and get the fix from the link below.</p>
<p><a href="http://www.kayee.nl/2016/01/10/sitecore-8-1-multi-line-text-field-with-experience-button-problem/" target="_blank" rel="external">http://www.kayee.nl/2016/01/10/sitecore-8-1-multi-line-text-field-with-experience-button-problem/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you’re using Multi-Line fields in Sitecore, as of Sitecore 8.1 Update 1 you will encounter problems with using them when editing content in the Experience Editor.</p>
<p>These two bugs are:</p>
<ol>
<li>When you create a new line in the field, the Experience Editor will actually add two new line breaks instead of one.</li>
<li>When you save, all lines except for the first are not saved.]]>
    
    </summary>
    
      <category term="bugs" scheme="http://www.kasaku.co.uk/tags/bugs/"/>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-8" scheme="http://www.kasaku.co.uk/tags/sitecore-8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Implementing a Virtual Field in Sitecore]]></title>
    <link href="http://www.kasaku.co.uk/2015/08/16/implementing-a-virtual-field-in-sitecore/"/>
    <id>http://www.kasaku.co.uk/2015/08/16/implementing-a-virtual-field-in-sitecore/</id>
    <published>2015-08-16T09:40:20.000Z</published>
    <updated>2016-03-21T20:35:24.533Z</updated>
    <content type="html"><![CDATA[<p>My recent work with Sitecore has involved getting to spend some time customizing the search results for editors. One task I wanted to accomplish was to improve the standard DateRange facet that is supplied with Sitecore. I had two issues I wanted to solve; I wanted a facet that was:</p>
<ul>
<li>More granular. The existing facet has values such as This Week, This Month, This Year. I wanted editors to have more options here, for example a facet to show items “3-6 months old”.</li>
<li>A better display. The standard facet displays its values in a rather user-unfriendly manner, e.g. “thisweek”. I would prefer “This week”.<a id="more"></a>
The facets used in Search Results are tied to items underneath <code>/System/Settings/Buckets/Facets</code>. I created a new item here, called “Friendly Date Range”, that I would use in place of “Date Range”. I associated this with a field I would create, to be called <code>friendlydaterange</code>.</li>
</ul>
<p>Now, the interesting thing about the existing <code>daterange</code> field is that it is not tied to an existing field in the index, it uses a <strong>Virtual Field</strong>. You can see how <code>daterange</code> is defined in the default index configuration here:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">virtualFieldProcessors</span> <span class="attribute">hint</span>=<span class="value">"raw:AddVirtualFieldProcessor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">virtualFieldProcessor</span> <span class="attribute">fieldName</span>=<span class="value">"daterange"</span> <span class="attribute">type</span>=<span class="value">"Sitecore.ContentSearch.VirtualFields.DateRangeFieldProcessor, Sitecore.ContentSearch"</span> /&gt;</span></span><br><span class="line">	... other fields ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">virtualFieldProcessors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>I had a good look around this class to determine how these fields are created, and thought I would summarise the interfaces that you will need to implement if you want to implement your own virtual field.</p>
<h1 id="Virtual_Fields">Virtual Fields</h1><p>A virtual field is a field in the search index that <em>doesn’t actually exist in the physical index</em>. Instead, it is computed at search run-time, and will typically use one or more backing fields that <strong>do</strong> exist within the index to create an entirely new field. Note that this is different to <code>ComputedIndexField</code>s which are computed <em>when creating the index</em> and are stored in the index.</p>
<p>Why is a virtual field useful? Well it allows you to have a value of the field is dependent on <em>when the search is run</em>, rather than when the index was made; this is great for field values that are date and time dependent.</p>
<p>In the case of <code>daterange</code> - the actual index stores the absolute creation date of an item under <code>__smallcreateddate</code>. This value is set and doesn’t change. However, the <code>daterange</code> virtual field is used to turn this absolute value of, say, <em>20150803</em> into a relative one of <em>thismonth</em>. This new value obviously cannot be stored directly in the index itself, as it will quickly become out of date!</p>
<p>The virtual field works by implementing several methods that are called during the execution of the search. These are used to read and alter the fields of a document that come back with a search, as well as altering the outgoing query when a search needs to be made using the virtual field. There is also full support for faceting on virtual fields.</p>
<p>Let’s look at how the interfaces are implemented. The <code>DateRangeFieldProcessor</code> shown above implements two interfaces, <code>IFieldQueryTranslator</code> and <code>IVirtualFieldProcessor</code>. Here is what each implementation of these is required to do for a virtual field to work. The following was applied to <strong>Sitecore 7.2</strong>, but should be good for versions following that too.</p>
<h2 id="IFieldQueryTranslator">IFieldQueryTranslator</h2><p>The <code>IFieldQueryTranslator</code> has two methods and a property. Here’s what they do:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> FieldName &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>Simply the field name your virtual field will use.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TranslatedFieldQuery <span class="title">TranslateFieldQuery</span>(<span class="params"><span class="keyword">string</span> fieldName, <span class="keyword">object</span> fieldValue, ComparisonType comparison, FieldNameTranslator fieldNameTranslator</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>Takes the query from the search, which will include your virtual field being queried on, e.g. <code>daterange:thismonth</code>. Here you convert that query into a query on the real backing field(s), e.g. A range query on <code>__smallcreateddate</code> for values that fall in this current month.</p>
<p>This is only called if the fieldName passed in, matches the FieldName property, so it will only get called if your virtual field has been searched on.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; TranslateFieldResult(IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; fields, FieldNameTranslator fieldNameTranslator);</span><br></pre></td></tr></table></figure>
<p>When the results of the query come back from the index, you will want to inject the value for your virtual field into the document. Typically you would inspect the real backing field(s), determine what the value of your virtual field would be, and add it to the fields dictionary to return.</p>
<p>e.g. The document contains a value that falls within the current month in <code>__smallcreateddate</code>, so “thismonth” is added to <code>daterange</code> in the fields dictionary.</p>
<h2 id="IVirtualFieldProcessor">IVirtualFieldProcessor</h2><p>The <code>IVirtualFieldProcessor</code> has two methods to add faceting support. Here’s what they do:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">GetFacetsArgs <span class="title">TranslateFacetQuery</span>(<span class="params">GetFacetsArgs args</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>When a faceted search is made, you can inject a <code>FacetQuery</code> into the search for the real backing field(s) your virtual field uses. This is so that when the results come back from the index, you’ll have that facet data to use to create the facet data for your virtual field.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDictionary&lt;<span class="keyword">string</span>, ICollection&lt;KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;&gt;&gt; TranslateFacetResult(ProcessFacetsArgs args);</span><br></pre></td></tr></table></figure>
<p>When the results come back from the index, you’ll be given a collection of all of the facets and their values. At this point you can take the facet results for the backing field(s) you are using, and process them to create your own facet results.</p>
<p>For example, if with <code>TranslateFacetQuery</code> you added a <code>FacetQuery</code> for <code>__smallcreateddate</code>, you can iterate through this facet result and sum up all of the values that fall within the current month to create your own facet result for “thismonth”.</p>
<p>The virtual facet result is added to the collection, and the backing field results are removed as they are no longer needed.</p>
<h1 id="Summary">Summary</h1><p>That’s all you need to do to implement a virtual field. Please leave a comment if there is something I’ve missed or if you have any questions.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>My recent work with Sitecore has involved getting to spend some time customizing the search results for editors. One task I wanted to accomplish was to improve the standard DateRange facet that is supplied with Sitecore. I had two issues I wanted to solve; I wanted a facet that was:</p>
<ul>
<li>More granular. The existing facet has values such as This Week, This Month, This Year. I wanted editors to have more options here, for example a facet to show items “3-6 months old”.</li>
<li>A better display. The standard facet displays its values in a rather user-unfriendly manner, e.g. “thisweek”. I would prefer “This week”.]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-search" scheme="http://www.kasaku.co.uk/tags/sitecore-search/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[From Wordpress to Hexo]]></title>
    <link href="http://www.kasaku.co.uk/2015/06/05/from-wordpress-to-hexo/"/>
    <id>http://www.kasaku.co.uk/2015/06/05/from-wordpress-to-hexo/</id>
    <published>2015-06-05T12:00:00.000Z</published>
    <updated>2015-06-05T15:40:31.250Z</updated>
    <content type="html"><![CDATA[<p>The site is being relaunched today! Previously, <a href="http://www.kasaku.co.uk">kasaku.co.uk</a> was running under Wordpress with Azure hosting. I decided that Wordpress, and especially the Wordpress hosting, was a little overkill for the site. With that in mind, I decided to look at what static-site generators were around.<br><a id="more"></a><br>After looking at a couple, I’ve decided to run with <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a> which is built on top of <a href="https://nodejs.org/" target="_blank" rel="external">NodeJS</a>. Whilst I don’t use NodeJS for any server-side development, I’ve been making more and more use of it in my development environment for front-end build processing through <a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>, so I had most of what was required already.</p>
<p>The site is pretty basic at the moment, and just hosted through Github for now. But the redesign has brought about a couple of changes:</p>
<ul>
<li>Social media links, including one for the new Sitecore Community!</li>
<li>Disqus for comments</li>
<li>More readable sytax highlighting</li>
<li>RSS feed, if you like that sort of thing.</li>
</ul>
<p>The syntax highlighting is based on <a href="https://highlightjs.org/" target="_blank" rel="external">HighlightJS</a>, which does appear to have a couple of bugs when it comes to rendering C# source. Hopefully I can get those ironed out.</p>
<p>I also might look to expand the template and build on more areas in the site, but for now it’s just remaining a blog!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The site is being relaunched today! Previously, <a href="http://www.kasaku.co.uk">kasaku.co.uk</a> was running under Wordpress with Azure hosting. I decided that Wordpress, and especially the Wordpress hosting, was a little overkill for the site. With that in mind, I decided to look at what static-site generators were around.<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Sitecore custom provider gotcha]]></title>
    <link href="http://www.kasaku.co.uk/2015/02/16/sitecore-custom-provider-gotcha/"/>
    <id>http://www.kasaku.co.uk/2015/02/16/sitecore-custom-provider-gotcha/</id>
    <published>2015-02-16T12:28:40.000Z</published>
    <updated>2015-06-05T15:40:43.432Z</updated>
    <content type="html"><![CDATA[<p>Sitecore uses the <a href="ASP.NET Membership Provider">https://msdn.microsoft.com/en-us/library/ms731049(v=vs.110).aspx</a> framework for managing its users, and also provides this as a means for you to manage your own users of your website in the <em>extranet</em> domain (or other domains that you have implemented).</p>
<p>In certain cases, you may want to implement your own custom backing store for users, rather than the default SQL Server provider. Fortunately, Sitecore includes a mechanism so that it can support multiple providers under one website, this is through the <code>SwitchingProviders</code> within the <code>Sitecore.Security</code> namespace.<br><a id="more"></a><br>There are already a number of useful links covering implementing your own custom membership provider using the Switcher:</p>
<ul>
<li><a href="http://sdn.sitecore.net/upload/sdn5/modules/ad/low-level_sitecore_cms_security_and_custom_providers-a4.pdf" target="_blank" rel="external">http://sdn.sitecore.net/upload/sdn5/modules/ad/low-level_sitecore_cms_security_and_custom_providers-a4.pdf</a></li>
<li><a href="http://www.mintydog.com/2013/09/a-custom-membership-provider-in-sitecore-part-1/" target="_blank" rel="external">http://www.mintydog.com/2013/09/a-custom-membership-provider-in-sitecore-part-1/</a></li>
<li><a href="http://www.mintydog.com/2013/10/a-custom-membership-provider-in-sitecore-part-2/" target="_blank" rel="external">http://www.mintydog.com/2013/10/a-custom-membership-provider-in-sitecore-part-2/</a></li>
<li><a href="https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/" target="_blank" rel="external">https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/</a></li>
<li><a href="https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/" target="_blank" rel="external">https://himadritechblog.wordpress.com/2014/11/24/sitecore-custom-membership-provider/</a></li>
</ul>
<p>This is just a short blog post to highlight a couple of a small gotcha that you may encounter, due to some inconsistencies in Sitecore’s implementation of the Switching providers.</p>
<h3 id="The_issue">The issue</h3><p>The first link in the above list is the official Sitecore documentation for implementing new providers. In <em>3.1.1 Configuring Switching Providers</em>, the following attributes for defining providers via a SwitchingProvider are defined:</p>
<ul>
<li>ProviderName</li>
<li>StoreFullNames</li>
<li>Wildcard</li>
<li>Domains</li>
</ul>
<p>Whilst these are the properties for the <code>SwitchingMembershipProvider</code>, the remaining providers have a couple of additional undocumented options, that have a large affect on how they operate:</p>
<h4 id="SwitchingRoleProvider">SwitchingRoleProvider</h4><p>The Role Provider adds an additional 2 undocumented properties:</p>
<p><strong>ignoredUserDomains</strong> - If this is specified, then the provider <strong>won’t apply</strong> to the domains listed. Multiple domains should be comma-separated.<br><strong>allowedUserDomains</strong> - If this is specified, then the provider <strong>will only apply</strong> to the domains listed. Multiple domains should be comma-separated.</p>
<p>As you can see, the way these two operate are at odds with each other (one is a blacklist, the other a whitelist). The provider only expects there to be one provided,; if you provide both, it will throw an exception.</p>
<p>Note that for this provider, the <code>domain</code> property <strong>is completely ignored</strong>. This can cause some real confusion if you have implemented a new provider and you are wondering why it is getting called for other domains, even though you’ve specified a domain there.</p>
<h4 id="SwitchingProfileProvider">SwitchingProfileProvider</h4><p>The Profile Provider adds just the one additional property:</p>
<p><strong>ignoredDomains</strong> - This works exactly the same as <strong>ignoredUserDomains</strong> for the Role Provider.</p>
<p>And that’s it. No option for a whitelist only, and again, the domain property is ignored.</p>
<p>It’s not clear why the Role + Profile providers don’t just provide the same properties as each other, nor why these aren’t available to the Membership Provider. This might just be a small gotcha, but it’s worth taking note of this little eccentricity of the code.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Sitecore uses the <a href="ASP.NET Membership Provider">https://msdn.microsoft.com/en-us/library/ms731049(v=vs.110).aspx</a> framework for managing its users, and also provides this as a means for you to manage your own users of your website in the <em>extranet</em> domain (or other domains that you have implemented).</p>
<p>In certain cases, you may want to implement your own custom backing store for users, rather than the default SQL Server provider. Fortunately, Sitecore includes a mechanism so that it can support multiple providers under one website, this is through the <code>SwitchingProviders</code> within the <code>Sitecore.Security</code> namespace.<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Event tracking in Google Analytics]]></title>
    <link href="http://www.kasaku.co.uk/2015/01/26/event-tracking-in-google-analytics/"/>
    <id>http://www.kasaku.co.uk/2015/01/26/event-tracking-in-google-analytics/</id>
    <published>2015-01-26T14:22:24.000Z</published>
    <updated>2015-06-05T15:40:55.254Z</updated>
    <content type="html"><![CDATA[<p>This is a short guide on putting together a simple-yet-powerful script for tracking custom events in Google Analytics. Whilst there <strong>is</strong> already a ton of information on the web about Google Analytics and what you can achieve with it, this blog entry is aimed at devs who want to get going quickly with event tracking.<br><a id="more"></a><br>If you’re completely new to Google Analytics, your best bet is to at least read the <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/" target="_blank" rel="external">Google introduction</a>. They also provide documentation to give <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" target="_blank" rel="external">an overview on Event Tracking</a>.</p>
<p>The rest of this post assumes that you are familiar enough with GA to know about the ga() function and how it can be used to send events.</p>
<p><em>Note: Google Analytics doesn’t <strong>require</strong> jQuery, but the examples in this blog do use jQuery for setting up events. It is also assumed you are using the new version of Google Analytics, analytics.js.</em></p>
<h2 id="Getting_started">Getting started</h2><p>You’ll need the Google Analytics script defined in your page. If you haven’t done this yet, <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/" target="_blank" rel="external">Google have got you covered</a>.</p>
<p>If using ASP.NET MVC, it’s a good idea to have this in its own view that you can cache the output of. You can also use a configuration setting to determine whether to output the script at all, to avoid enabling Google Analytics on development / test servers, or perhaps to use a different ID in those environments.</p>
<p>Simply adding this script will get page views tracking in Google Analytics.</p>
<h2 id="Creating_a_custom_tracking_script">Creating a custom tracking script</h2><p>Once you have the default script, you can then add your own javascript to implement additional GA functionality throughout your site.</p>
<p>The following is a skeleton script that you can then expand on:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysite = mysite || &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> mysite.analytics = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _Private function</span></span><br><span class="line">  <span class="keyword">var</span> _setTrackingEvents = <span class="function"><span class="keyword">function</span>(<span class="params">ga</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Custom tracking code to go here...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Public function  </span></span><br><span class="line">  <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ga === <span class="string">'undefined'</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> ga_debug !== <span class="string">'undefined'</span> &amp;&amp; ga_debug) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Setting up analytics in debug mode.'</span>);</span><br><span class="line"></span><br><span class="line">        ga = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Google Analytics disabled.'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _setTrackingEvents(ga);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    init: init</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>Typically, once this script has been loaded, then, at a suitable point in your site’s code (e.g. after page load), you can call <code>mysite.analytics.init();</code> to execute the code and setup your events.</p>
<p>If the Google Analytics script hasn’t been added to the page, this script checks to see if there is a <code>ga_debug</code> variable defined. If there is and its value is <a href="http://www.sitepoint.com/javascript-truthy-falsy/" target="_blank" rel="external">truthy</a>, the script creates a dummy ga() function that simply logs to the console. This is useful for testing your analytics events without needing a real GA account in place. If the debug value isn’t in place, this script simply doesn’t go any further.</p>
<h2 id="Event_Tracking">Event Tracking</h2><p>Right, on to <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" target="_blank" rel="external">event tracking</a>! As events are simply tracked by calling a function in javascript, they can be associated with almost <em>any</em> user behaviour on a website - this includes clicking on anything on the page, timings between actions, the scrolling of a page, and much more. If you can imagine it, you can likely write it.</p>
<p>Let’s look at some of the events you could create.</p>
<p>First of all, a good piece of advice is to <strong>keep your event definitions generic</strong> where you can.</p>
<p>Rather than tracking every interaction individually on your site, try to logically group the different types of interaction together and then come up with a method of selecting these elements. This is especially important where you are building a CMS-driven site and the HTML will be generated on the server.</p>
<p>As an example of a poor way of implementing tracking links, look at the following HTML and Javascript:</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"products-link"</span> <span class="attribute">href</span>=<span class="value">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"contact-link"</span> <span class="attribute">href</span>=<span class="value">"/contact"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#products-link'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Link'</span>, <span class="string">'Clicked'</span>, <span class="string">'Products'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#contact-link'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Link'</span>, <span class="string">'Clicked'</span>, <span class="string">'Contact'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Whilst this will track both of the links, it is time consuming to implement, and you’re going to need to expand your analytics script every time you add a new link to the site.</p>
<p>How about this instead?</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">data-ga-link</span> <span class="attribute">href</span>=<span class="value">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">data-ga-link</span> <span class="attribute">href</span>=<span class="value">"/contact"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-ga-link]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Link'</span>, <span class="string">'Clicked'</span>, $(<span class="keyword">this</span>).text() );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>If you prefer, you can use a <code>class selector</code> instead, though using data-<em> attributes helps to keep the classes of your elements simply for styling. You can even drop this method and go for </em>any* click on a link using the <code>a</code> selector, though this is rather indiscriminate. It’s up to you ultimately on what you’re interested in tracking.</p>
<p>The message here though is to try to group the interactions where you can, so your tracking code can be simpler. There are, of course, times where you will want to track specific events that only occur in single places on your site, and that’s ok.</p>
<h2 id="Tracking_Examples">Tracking Examples</h2><p>Now let’s look at some examples of events you can track.</p>
<h3 id="Email_Links">Email Links</h3><p>Use this to track when a user clicks on an email link.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"mailto:mail@server.com"</span>&gt;</span>Email the team!<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[href^="mailto:"]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> email = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>).replace(<span class="string">"mailto:"</span>,<span class="string">""</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Email'</span>, <span class="string">'Link Clicked'</span>, email);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Email</td>
<td>Link Clicked</td>
<td>mail@server.com</td>
</tr>
</tbody>
</table>
<h3 id="Social_Links">Social Links</h3><p>If you have social media “Share” links that you executing as part of JS, you could also track them through GA events.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list-social-nav"</span> <span class="attribute">data-social-nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-social</span>=<span class="value">"twitter"</span> <span class="attribute">class</span>=<span class="value">"twitter"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"icon icon-twitter"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-social</span>=<span class="value">"facebook"</span> <span class="attribute">class</span>=<span class="value">"facebook"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"icon icon-facebook"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-social]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> shareType = $(<span class="keyword">this</span>).data(<span class="string">'social'</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Share'</span>, <span class="string">'Link Clicked'</span>, shareType);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Share</td>
<td>Link Clicked</td>
<td>Facebook</td>
</tr>
</tbody>
</table>
<h3 id="Generic_Link">Generic Link</h3><p>Similar to the example above, a generic link tracking. This however also includes the text of the link, which could prove useful in determining which buttons on your site are resulting in the most clicks.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">data-ga-link</span> <span class="attribute">href</span>=<span class="value">"/products"</span>&gt;</span>View products<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-ga-link]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> linkText = $(<span class="keyword">this</span>).text();</span><br><span class="line">  <span class="keyword">var</span> linkDestination = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Button'</span>, <span class="string">'Clicked'</span>, linkText + <span class="string">' -&gt; '</span> + linkDestination);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Button</td>
<td>Clicked</td>
<td>View products -&gt; /products</td>
</tr>
</tbody>
</table>
<h3 id="Header_Navigation">Header Navigation</h3><p>This is useful if you have some top-level header navigation that contains links, and you want to track the level of user interaction with these specific links.</p>
<p>If you have a footer, you can apply the same principle but using a separate data element, for example <code>ga-footer-links</code>.</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">data-ga-header-links</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/products"</span>&gt;</span>Products<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'[data-ga-header-links] a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> linkText = $(<span class="keyword">this</span>).text();</span><br><span class="line">  <span class="keyword">var</span> linkDestination = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Header'</span>, <span class="string">'Link Clicked'</span>, linkText + <span class="string">' -&gt; '</span> + linkDestination);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Link Clicked</td>
<td>Products -&gt; /products</td>
</tr>
</tbody>
</table>
<h3 id="Client-side_interactions">Client-side interactions</h3><p>You don’t need to restrict your interaction tracking to just page links on the site. You may already have events setup on your site for particular types of functionality, for example a “Show More” button that reveals some hidden content on the page:</p>
<p><strong>HTML</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-reveal</span>=<span class="value">"#my-hidden-content"</span>&gt;</span>Show More<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"my-hidden-content"</span> <span class="attribute">class</span>=<span class="value">"hidden"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Additional content here... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[data-reveal]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $( $(<span class="keyword">this</span>).data(<span class="string">'reveal'</span>) ).removeClass(<span class="string">'hidden'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>You may be interested in tracking how many users are actually revealing that content. If you want to do this, don’t edit the previously defined event code that implements the reveal; it’s perfectly fine to have multiple events trigger when a button is clicked, and it is much neater to keep your analytics tracking code together in one place. Instead, you can just add another event:</p>
<p><strong>Javascript</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'a[data-reveal]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = $(<span class="keyword">this</span>).data(<span class="string">'reveal'</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Show More'</span>, <span class="string">'Clicked'</span>, target);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>The tiny inefficiency here of multiple events is worth it to keep this code much more maintainable.</p>
<p><strong>Tracked result</strong></p>
<table>
<thead>
<tr>
<th>Category</th>
<th>Action</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>Show More</td>
<td>Clicked</td>
<td>#my-hidden-content</td>
</tr>
</tbody>
</table>
<h3 id="Scroll_Events">Scroll Events</h3><p>A simple page-load isn’t really enough to determine how much of your website a user is actually seeing when they visit. For example, are they just viewing the page and immediately leaving, or are they actually scrolling down to see more content? How many of your users do this?</p>
<p>To help capture this sort of information, you can track when and how far a user scrolls on a page. Whilst you can write this code yourself, there is already a small JS library that wraps up the functionality for you - <a href="http://scrolldepth.parsnip.io/" target="_blank" rel="external">Scroll Depth</a>.</p>
<p>By default, Scroll Depth tracks events for the <strong>percentage</strong> a user scrolls down the page - firing events at 25%, 50%, 75% and 100%. However, as well as customizing these percentages, you can also specify the IDs of elements on your page and it will fire tracking events when a user scrolls far enough down for that element to become visible. That’s great, as it tells you how many users are actually seeing a specific part of the page you have designed.</p>
<p>Once the script has been included, a typical way to invoke this library would be:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.scrollDepth(&#123;</span><br><span class="line">  elements: [<span class="string">'#products'</span>, <span class="string">'#buy-now'</span>, <span class="string">'#search-results'</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Using the above skeleton script as an example, the ideal place to execute this would be straight after <code>_setTrackingEvents</code> is called.</p>
<h2 id="Summary">Summary</h2><p>This has been just a few simple examples of event tracking that you can implement on your site. With the flexibility of Javascript, you can create <em>way</em> more sophisticated events than those mentioned here. Hopefully the above provides a useful primer for you if you are just getting started with Google Analytics.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is a short guide on putting together a simple-yet-powerful script for tracking custom events in Google Analytics. Whilst there <strong>is</strong> already a ton of information on the web about Google Analytics and what you can achieve with it, this blog entry is aimed at devs who want to get going quickly with event tracking.<br>]]>
    
    </summary>
    
      <category term="analytics" scheme="http://www.kasaku.co.uk/tags/analytics/"/>
    
      <category term="javascript" scheme="http://www.kasaku.co.uk/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Referencing folders with Placeholder Settings]]></title>
    <link href="http://www.kasaku.co.uk/2014/12/23/referencing-folders-with-placeholder-settings/"/>
    <id>http://www.kasaku.co.uk/2014/12/23/referencing-folders-with-placeholder-settings/</id>
    <published>2014-12-23T14:01:42.000Z</published>
    <updated>2015-06-05T15:41:10.210Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.sitecore.net/Learn/Blogs/Technical-Blogs/Maximizing-Usability/Posts/2012/08/The-Power-of-Placeholder-Settings.aspx" target="_blank" rel="external">Placeholder Settings</a> allow you to choose what Renderings / Sublayouts you want to be selectable to add in to the placeholders of your layouts.</p>
<p>Each time you create a new Rendering, you need to update the placeholder settings too so that the editors can use the rendering. If you keep your renderings nicely organised within a folder structure, then there’s a simple method for making this a bit more flexible and having Sitecore automatically pick up the renderings by referencing a <em>folder of renderings</em> rather than the rendering itself.<br><a id="more"></a><br>Within the Content Editor for the settings, Sitecore allows you to add a rendering folder, rather than a rendering itself:</p>
<p><img src="/2014/12/23/referencing-folders-with-placeholder-settings/placeholder_settings.png" alt="Placeholder settings" title="Placeholder settings"></p>

<p>Typically, selecting the folder would have no effect. However, with the following pipeline, we can alter the functionality of Sitecore so that if a folder has been added, it pulls in <strong>all</strong> of the child renderings that sit underneath it.</p>
<p>This can be very useful if you keep your renderings organised by functionality, so for example you want a “Forms” placeholders setting that will contain all of the Form renderings you have created. If you keep them together in the same folder, you can have them added automatically, without having to update the settings.</p>
<h3 id="Creating_the_pipeline_class">Creating the pipeline class</h3><p>The following is all the code we need for the pipeline step:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetRenderingsFromFolders</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">GetPlaceholderRenderingsArgs args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Assert.IsNotNull((<span class="keyword">object</span>)args, <span class="string">"args"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.PlaceholderRenderings == <span class="keyword">null</span> || args.PlaceholderRenderings.Count == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newRenderings = args.PlaceholderRenderings</span><br><span class="line">            .Where(ItemIsAFolder)</span><br><span class="line">            .SelectMany(GetChildRenderings)</span><br><span class="line">            .Distinct(<span class="keyword">new</span> ItemIdComparer())</span><br><span class="line">            .ToList();</span><br><span class="line"></span><br><span class="line">        args.PlaceholderRenderings.AddRange(newRenderings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ItemIsAFolder</span>(<span class="params">Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.DerivesFromTemplate(ID.Parse(TemplateIds.Folder)) ||</span><br><span class="line">               item.DerivesFromTemplate(ID.Parse(TemplateIds.RenderingsFolder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerable&lt;Item&gt; <span class="title">GetChildRenderings</span>(<span class="params">Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// Can just return all children - the pipeline already handles only keeping hold of items</span></span><br><span class="line">        <span class="comment">// that are rendering items.</span></span><br><span class="line">        <span class="keyword">return</span> item.Children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code for this is relatively straight-forward. It makes use of a standard <code>DerivesFromTemplate</code> extension method that you’ll need to implement. There is also a static class used for ID references, but you could just drop the IDs straight in.</p>
<p>The GetChildRenderings method is actually extremely simple and could be removed, but it’s left in to illustrate that you could replace this with other logic, such as all descendants of an item, or perhaps using a parameter to determine what renderings to pick up.</p>
<h3 id="Adding_the_config">Adding the config</h3><p>With this code in our solution, we need to add the command to config so that it can be referenced. This can done with a simple config file in the Include folder, with the appropriate assembly + class reference:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span> <span class="attribute">xmlns:patch</span>=<span class="value">"http://www.sitecore.net/xmlconfig/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">sitecore</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">pipelines</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">getPlaceholderRenderings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">processor</span> <span class="attribute">type</span>=<span class="value">"YourWebsite.Sc.Pipelines.GetPlaceholderRenderings.GetRenderingsFromFolders, YourWebsite.Sc"</span></span><br><span class="line">                   <span class="attribute">patch:after</span>=<span class="value">"*[@type='Sitecore.Pipelines.GetPlaceholderRenderings.GetAllowedRenderings, Sitecore.Kernel']"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">getPlaceholderRenderings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">pipelines</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">sitecore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>And that’s it! You can now just reference folders in your Placeholder Settings and all of the child renderings underneath will be pulled in.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.sitecore.net/Learn/Blogs/Technical-Blogs/Maximizing-Usability/Posts/2012/08/The-Power-of-Placeholder-Settings.aspx">Placeholder Settings</a> allow you to choose what Renderings / Sublayouts you want to be selectable to add in to the placeholders of your layouts.</p>
<p>Each time you create a new Rendering, you need to update the placeholder settings too so that the editors can use the rendering. If you keep your renderings nicely organised within a folder structure, then there’s a simple method for making this a bit more flexible and having Sitecore automatically pick up the renderings by referencing a <em>folder of renderings</em> rather than the rendering itself.<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating a customized root for the Content Editor]]></title>
    <link href="http://www.kasaku.co.uk/2014/12/12/creating-a-customized-root-for-the-content-editor/"/>
    <id>http://www.kasaku.co.uk/2014/12/12/creating-a-customized-root-for-the-content-editor/</id>
    <published>2014-12-12T11:08:34.000Z</published>
    <updated>2015-06-05T15:41:24.094Z</updated>
    <content type="html"><![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some. As Sitecore 8 has all the editors ported to SPEAK, it is unlikely that this method will work from that version onwards.</em></p>
<p>Have you noticed how the <strong>Marketing Center</strong> icon in the Sitecore Start Menu is just used to load a new Content Editor window, but with a particular root item? In that particular case it goes straight to <code>/sitecore/system/Marketing Center</code>.<br><a id="more"></a><br>It’s quite a simple addition but can speed up work for your editors if they’re able to use an icon to launch straight into an area they regularly work with, especially if it’s tucked away in your content tree. Additionally, if you’ve removed access for them to one of the ancestor items, they won’t see it in the standard Content Editor tree at all, even if they have access to that particular descendant.</p>
<p>This short tutorial shows you how to create a new shortcut to launch a Content Editor with a customized root item of your choice.</p>
<h3 id="Creating_the_layout">Creating the layout</h3><p>First of all, you’ll need to create a page that will get shown when the window opens. I have based the code for this Layout on the very same code used by the Marketing Center, no point in reinventing the wheel. All the code really does is launch the real Content Editor ASPX page, complete with some URL parameters to have it open the right item.</p>
<p>Create an ASPX page and fill it with the following, though replace the ID passed to <code>Client.ContentDatabase.GetItem</code> with the ID of the root item you want to be displayed when the window opens. You can also customize the <code>he</code> and <code>ic</code> parameters to give the new window a custom URL + icon.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Page</span> <span class="attribute">Language</span>=<span class="value">"C#"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore.Data.Items"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore.Diagnostics"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore.Text"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">Import</span> <span class="attribute">Namespace</span>=<span class="value">"Sitecore"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">language</span>=<span class="value">"c#"</span> <span class="attribute">runat</span>=<span class="value">"server"</span>&gt;</span><span class="openscad"></span><br><span class="line">  override protected void OnInit<span class="params">([NotNull] EventArgs e)</span> &#123;</span><br><span class="line">    Assert.ArgumentNotNull<span class="params">(e, <span class="string">"e"</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    var url = new UrlString<span class="params">(<span class="string">"/sitecore/shell/Applications/Content Manager/default.aspx"</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Get the root item to display in the Content Manager window.</span></span><br><span class="line">    Item rootItem = Client.ContentDatabase.GetItem<span class="params">(<span class="string">"&#123;D6538613-BA3E-4C82-ACEC-94DC010BA2CD&#125;"</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(rootItem == null)</span></span><br><span class="line">      return;</span><br><span class="line">      </span><br><span class="line">    url.Add<span class="params">(<span class="string">"he"</span>, <span class="string">"Blog Editor"</span>)</span>;</span><br><span class="line">    url.Add<span class="params">(<span class="string">"pa"</span>, <span class="string">"0"</span>)</span>;</span><br><span class="line">    url.Add<span class="params">(<span class="string">"ic"</span>, <span class="string">"people/16x16/user1_message.png"</span>)</span>;</span><br><span class="line">    url.Add<span class="params">(<span class="string">"ro"</span>, rootItem.ID.ToString<span class="params">()</span>)</span>;</span><br><span class="line">    url[<span class="string">"mo"</span>] = <span class="string">"templateworkspace"</span>;</span><br><span class="line">    </span><br><span class="line">    Response.Redirect<span class="params">(url.ToString<span class="params">()</span>)</span>;   </span><br><span class="line">  &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Save this ASPX file where you like, you may prefer to go somewhere within the <code>/sitecore</code> folder, or perhaps the <code>/sitecore modules</code> folder instead to keep it separate.</p>
<p>Next, create a new Layout item in the Core database. I would recommend following Sitecore’s pattern and keeping it under the Applications folder located at <code>/sitecore/layout/Layouts/Applications</code>, or perhaps use a subfolder with your project name. The <code>Path</code> field of this layout should be a relative path to your new ASPX page.</p>
<h3 id="Creating_the_application">Creating the application</h3><p>Now you need to create an <strong>Application</strong> that uses this layout. Create a new Application item under <code>/sitecore/content/Applications</code>, if you right-click on the Applications item you should find that an Insert Option has already been defined for adding an Application.</p>
<p>In this new item, set the <code>Chrome</code> field to <code>BorderlessChrome</code>, otherwise the window won’t display correctly. The <code>Icon</code> field will control how the Application will appear in the Start Menu later, use a 32x32 icon. You can also set the <code>Display Name</code> and <code>Tool Tip</code> fields.</p>
<p>Next, edit the <strong>Presentation Details</strong> of the item and set the layout to your newly created layout from the previous setup.</p>
<h3 id="Creating_the_shortcut">Creating the shortcut</h3><p>Finally, you need to create the shortcut. Under <code>/sitecore/content/Documents and settings/All users/Start menu</code> are several items that represent the different areas of the Start Menu. Choose the one where you would like your icon to appear and create a new item of type <code>/sitecore/templates/Sitecore Client/Applications/Application shortcut</code> (you should find it as an Insert Option).</p>
<p>In the shortcut item, set the <code>Application</code> link field to point to your Application item. If you want a particular shortcut to override the default settings for an Application, you can also set the <code>Icon</code>, <code>Display Name</code> and <code>Tool tip</code> fields.</p>
<h3 id="Tada!">Tada!</h3><p>That’s all there is to it, your new shortcut should be appearing in the Start Menu, and when you click it you’ll get your new customized Content Editor.</p>
<p><img src="/2014/12/12/creating-a-customized-root-for-the-content-editor/blog-shortcut.png" alt="New blog shortcut" title="New blog shortcut"></p>]]></content>
    <summary type="html">
    <![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some. As Sitecore 8 has all the editors ported to SPEAK, it is unlikely that this method will work from that version onwards.</em></p>
<p>Have you noticed how the <strong>Marketing Center</strong> icon in the Sitecore Start Menu is just used to load a new Content Editor window, but with a particular root item? In that particular case it goes straight to <code>/sitecore/system/Marketing Center</code>.<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Creating a custom gutter validator]]></title>
    <link href="http://www.kasaku.co.uk/2014/12/08/creating-a-custom-gutter-validator/"/>
    <id>http://www.kasaku.co.uk/2014/12/08/creating-a-custom-gutter-validator/</id>
    <published>2014-12-08T14:07:59.000Z</published>
    <updated>2015-06-05T15:41:28.648Z</updated>
    <content type="html"><![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some.</em></p>
<p>Whilst a lot of content editors using Sitecore prefer to use the Page Editor, the Content Editor still sees a lot of use. One of the features of the content editor is the gutter validators, used to quickly provide a visual check of the validation state of items in the tree:<br><a id="more"></a></p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/gutter-validator.png" alt="Gutter Validator example" title="Gutter Validator example"></p>

<p>It’s very easy to add your own custom validation here.</p>
<h3 id="Creating_the_code">Creating the code</h3><p>First of all, create the code for your gutter validator. Create a new class and have it inherit from <code>Sitecore.Shell.Applications.ContentEditor.Gutters.GutterRenderer</code>. In this class you should override the <code>GetIconDescriptor(Item item)</code> method, which returns a <code>GutterIconDescriptor</code>.</p>
<p>This overriden method should return an instance of <code>GutterIconDescriptor</code> if the validation has failed, or null if the validation passes.</p>
<p>For the sake of example, here we have a validator that checks to see if an item has over 100 child items and if so will fail validation:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TooManyChildrenValidator</span> : <span class="title">GutterRenderer</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> GutterIconDescriptor <span class="title">GetIconDescriptor</span>(<span class="params">Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">       Assert.ArgumentNotNull(item, <span class="string">"item"</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// If the item isn't valid, return the validation error description,</span></span><br><span class="line">       <span class="comment">// otherwise return null.</span></span><br><span class="line">       <span class="keyword">return</span> !ItemIsValid(item) ? GetGutterDescriptor() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">ItemIsValid</span>(<span class="params">Sitecore.Data.Items.Item item</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">       <span class="comment">// Item passes validation if it has 100 children or less</span></span><br><span class="line">       <span class="keyword">return</span> item.Children.Count() &amp;lt;= <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GutterIconDescriptor <span class="title">GetGutterDescriptor</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">       <span class="comment">// Return a new descriptor showing a warning icon and message</span></span><br><span class="line">       GutterIconDescriptor descriptor = <span class="keyword">new</span> GutterIconDescriptor();</span><br><span class="line">       descriptor.Icon = <span class="string">"Applications/16x16/information2.png"</span>;</span><br><span class="line">       descriptor.Tooltip = <span class="string">"This item has quite a lot of items underneath it and may affect Sitecore performance."</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> descriptor;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>You can use the above code as a template, all you need to do is customize the <code>ItemIsValid</code> method with your own validation logic, and alter the <code>GetGutterDescriptor</code> method to choose an icon and tooltip that’s suitable for you.</p>
<p>That’s all there is too it for the code. Compile the assembly and make sure it is deployed to your Sitecore bin directory.</p>
<h3 id="Creating_the_Validation_Item">Creating the Validation Item</h3><p>Now you need to create an item for the gutter validator in Sitecore, so that it can be selected. This should be located in the Core database underneath the item <code>/sitecore/content/Applications/Content Editor/Gutters</code>.</p>
<p>You should create your item using the <code>/sitecore/templates/Sitecore Client/Content editor/Gutter Renderer</code> template.</p>
<p>The <code>Header</code> field represents how your validator will appear in the context-menu, and the <code>Type</code> field is the fully-qualified name of your new type:</p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/validator-editor.png" alt="Gutter Validator fields" title="Gutter Validator fields"></p>

<h3 id="Trying_it_out">Trying it out</h3><p>Once that’s saved you can jump back into the master database and enable it. Right-click in the gutter to enable your validator, and then you should see your validation icon wherever an item fails your validation:</p>
<p><img src="/2014/12/08/creating-a-custom-gutter-validator/validator-effect.png" alt="The effect of the new validator" title="The effect of the new validator"></p>]]></content>
    <summary type="html">
    <![CDATA[<p><em>Note: This is a port of an old post from a previous blog, originally written to target Sitecore 6.3, though it still applies as of Sitecore 7.5. Whilst it is now not such a new subject, it may still prove useful to some.</em></p>
<p>Whilst a lot of content editors using Sitecore prefer to use the Page Editor, the Content Editor still sees a lot of use. One of the features of the content editor is the gutter validators, used to quickly provide a visual check of the validation state of items in the tree:<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A RemoveLink command for PageEditor]]></title>
    <link href="http://www.kasaku.co.uk/2014/12/04/a-removelink-command-for-pageditor/"/>
    <id>http://www.kasaku.co.uk/2014/12/04/a-removelink-command-for-pageditor/</id>
    <published>2014-12-04T14:22:43.000Z</published>
    <updated>2015-06-04T15:53:18.998Z</updated>
    <content type="html"><![CDATA[<p>Something that has bugged me for quite some time in the Sitecore Page Editor, is the inability to <strong>remove</strong> a Link field once one has been set (<em>at least you cannot at the time of writing in Sitecore 7.5, perhaps 8 will alter this</em>).<br><a id="more"></a><br>As of 7.5 and before, you can only edit the link via the Page Editor, and in that dialog there is no way to remove the existing link:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/edit-link.png" alt="Sitecore Edit Link dialog" title="Sitecore Edit Link dialog"></p>

<p>The only real way to remove the link is to shift over to the Content Editor and do it there. Whilst this works, if your editors are used to using the Page Editor it’s better if they can accomplish the task without navigating away.</p>
<p>Fortunately, it’s quite straight-forward to add a new command - one that clears any existing link in the field. Here’s the code for the command itself:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RemoveLink</span> : <span class="title">WebEditCommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">CommandContext context</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Assert.ArgumentNotNull(context, <span class="string">"context"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> formValue = WebUtil.GetFormValue(<span class="string">"scPlainValue"</span>);</span><br><span class="line">        context.Parameters.Add(<span class="string">"fieldValue"</span>, formValue);</span><br><span class="line"></span><br><span class="line">        Context.ClientPage.Start(<span class="keyword">this</span>, <span class="string">"Run"</span>, context.Parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> Runs the specified args.</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="args"&gt;</span>The arguments.<span class="xmlDocTag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params">ClientPipelineArgs args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Assert.ArgumentNotNull(args, <span class="string">"args"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(args.Parameters[<span class="string">"fieldValue"</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            SheerResponse.Alert(<span class="string">"There is no link to remove."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SheerResponse.SetAttribute(<span class="string">"scHtmlValue"</span>, <span class="string">"value"</span>, GetDefaultText());</span><br><span class="line">            SheerResponse.SetAttribute(<span class="string">"scPlainValue"</span>, <span class="string">"value"</span>, String.Empty);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> str = args.Parameters[<span class="string">"controlid"</span>];</span><br><span class="line"></span><br><span class="line">            ScriptInvokationBuilder invokationBuilder = <span class="keyword">new</span> ScriptInvokationBuilder(<span class="string">"scSetHtmlValue"</span>);</span><br><span class="line">            invokationBuilder.AddString(str);</span><br><span class="line">            invokationBuilder.Add(<span class="keyword">false</span>);</span><br><span class="line">            invokationBuilder.Add(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            SheerResponse.Eval(invokationBuilder.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetDefaultText</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">new</span> LanguageSwitcher(WebUtil.GetCookieValue(<span class="string">"shell"</span>, <span class="string">"lang"</span>, Context.Language.Name)))</span><br><span class="line">        &#123;</span><br><span class="line">            Database database = Factory.GetDatabase(<span class="string">"core"</span>);</span><br><span class="line">            Assert.IsNotNull(database, <span class="string">"core"</span>);</span><br><span class="line">            Item obj = database.GetItem(<span class="string">"/sitecore/content/Applications/WebEdit/WebEdit Texts"</span>);</span><br><span class="line">            Assert.IsNotNull(obj, <span class="string">"/sitecore/content/Applications/WebEdit/WebEdit Texts"</span>);</span><br><span class="line">            <span class="keyword">return</span> obj[<span class="string">"Default Text"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This code has been adapted from the existing <code>EditLink</code> and <code>ClearImage</code> commands, to mimic their behaviour.</p>
<p>The execution is very simple - first of all it checks to see if the field currently has a value in it, preventing it from clearing an already empty field. This prevents the page from being marked as ‘dirty’ and the user being warned that changes have been made if they try to navigate away without saving. If you feel the alert message here is overkill for the user, it could be removed so that in that branch of the code, it simply does nothing.</p>
<p>If there <strong>is</strong> a value, this just returns a javascript function call to clear the value from the field.</p>
<p>With this code in our solution, we need to add the command to config so that it can be referenced. This can done with a simple config file in the Include folder, with the appropriate assembly + class reference:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span> <span class="attribute">xmlns:patch</span>=<span class="value">"http://www.sitecore.net/xmlconfig/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">sitecore</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">commands</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">command</span> <span class="attribute">name</span>=<span class="value">"webedit:removelink"</span> <span class="attribute">type</span>=<span class="value">"YourWebsite.Sc.Client.WebEdit.Commands.RemoveLink, YourWebsite.Sc.Client"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">commands</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">sitecore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The last step is to create an Item in the Core database so that this command appears in the Page Editor for all Link Fields. In the folder at <code>/sitecore/system/Field types/Link Types/General Link/WebEdit Buttons</code>, add a new <code>WebEdit Button</code> item called <code>Remove Link</code>.</p>
<p>Within this item, set the appropriate fields to reference the command and choose a nice icon:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/remove-link-item.png" alt="Remove Link fields" title="Remove Link fields"></p>

<p>With that in place, you will immediately see a new icon in the Page Editor:</p>
<p><img src="/2014/12/04/a-removelink-command-for-pageditor/remove-link-demo.png" alt="Remove Link in Page Editor" title="Remove Link in Page Editor"></p>

<p>And that’s it!</p>
<p>I hope that proves useful, it’s a pretty straight-forward solution. I do suspect though that this could be entirely accomplished through javascript, as there is little need for any server-side processing. Please leave a comment if you found this useful, or have any suggestions.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Something that has bugged me for quite some time in the Sitecore Page Editor, is the inability to <strong>remove</strong> a Link field once one has been set (<em>at least you cannot at the time of writing in Sitecore 7.5, perhaps 8 will alter this</em>).<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A RequiresDataSource filter for Sitecore Controller Renderings]]></title>
    <link href="http://www.kasaku.co.uk/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/"/>
    <id>http://www.kasaku.co.uk/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/</id>
    <published>2014-11-13T22:59:55.000Z</published>
    <updated>2015-06-04T15:55:44.270Z</updated>
    <content type="html"><![CDATA[<p>A common requirement when creating components in Sitecore is for the component to rely on data being supplied via the DataSource. Whilst you can try your best to ensure that a DataSource is associated with a component, there will inevitably be occasions when that DataSource gets deleted or moved and ultimately isn’t provided to the component at the time of rendering.<br><a id="more"></a><br>What can work well in these occasions is to provide the content editor with some feedback that the component won’t function correctly, so that they know they shouldn’t publish the page in its current state.</p>
<p>In Sitecore Controller Renderings, this could be done through some code at the top of each rendering action, checking for a DataSource and acting accordingly if one wasn’t found. However, rather than write repetitve code in each rendering, a better method is to make use of a reusable <a href="http://msdn.microsoft.com/en-us/library/dd410209%28v=vs.100%29.aspx" target="_blank" rel="external">ActionFilter</a>.</p>
<p>When the ActionFilter is executed, it attempts to locate a DataSource within the current RenderingContext. If no DataSource is found, then a PartialView is returned and the action will not continue to execute.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class RequiresDataSource : FilterAttribute, IActionFilter</span><br><span class="line">&#123;</span><br><span class="line">  private const string DefaultNoDataSourceView = "_NoDataSource";</span><br><span class="line">  </span><br><span class="line">  protected Item DataSourceItem &#123; get; set; &#125;</span><br><span class="line">  </span><br><span class="line">  public virtual void OnActionExecuting(ActionExecutingContext filterContext)</span><br><span class="line">  &#123;</span><br><span class="line">    DataSourceItem = GetDataSourceItem();</span><br><span class="line">    </span><br><span class="line">    if (DataSourceItem == null)</span><br><span class="line">    &#123;</span><br><span class="line">      filterContext.Result = new PartialViewResult</span><br><span class="line">      &#123;</span><br><span class="line">        ViewName = NoDataSourceView ?? DefaultNoDataSourceView</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  private Item GetDataSourceItem()</span><br><span class="line">  &#123;</span><br><span class="line">    if (RenderingContext.Current == null || RenderingContext.Current.Rendering == null || </span><br><span class="line">        string.IsNullOrEmpty(RenderingContext.Current.Rendering.DataSource))</span><br><span class="line">    &#123;</span><br><span class="line">       return null;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    // A DataSource has at least been set. Now to find out if it is an actual item.</span><br><span class="line">    return Sitecore.Context.Database.GetItem(RenderingContext.Current.Rendering.DataSource);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void OnActionExecuted(ActionExecutedContext filterContext)</span><br><span class="line">  &#123;</span><br><span class="line">    // Not required.</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public string NoDataSourceView &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With this attribute created, you can assign it to an action:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[RequiresDataSource]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">HomepageCarousel</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="comment">// Controller rendering code goes here...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> PartialView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can also assign it to a controller if you want it to execute for <strong>every</strong> action within that controller.</p>
<p>If you don’t specify a view, the default will be used. However, if you need to specify a particular view for a given rendering, you can:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[RequiresDataSource(NoDataSourceView=<span class="string">"_NoDataSourceCustom"</span>)]</span><br></pre></td></tr></table></figure>
<p>What do you put in the view? That is completly up to what is necessary in your solution - however a good strategy is to provide a simple error message to a user using the PageEditor, but actually render nothing if the component still makes it to the published page without a DataSource:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@if (PageMode.IsPageEditor)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"error"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Heads up!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This component requires a DataSource but one has not been specified.</span><br><span class="line">    If this page is published in its current state, this component will be empty.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, if the component is viewed within the Page Editor, and no DataSource has been set, the user will see an informative message:</p>
<p><img src="/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/DS_Required.png" alt="No DataSource example" title="No DataSource example"></p>

<p>As well as provided the user with some feedback, it has removed the need for the null-checking that would have otherwise been required in the action to prevent exceptions, we’re now guaranteed that the code will only be executed if a DataSource has been set.</p>
<h3 id="Extending_the_attribute">Extending the attribute</h3><p>To provide the user with some more specific feedback, and also to ensure that our code only executes if the <strong>correct</strong> type of DataSource has been applied, we can extend the attribute to create another.</p>
<p>The <code>RequiresDataSourceOfTemplate</code> attribute shown below adds an additional check that occurs <em>if</em> the DataSource has been set, whereupon it additionally confirms that the DataSource is of the right template:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RequiresDataSourceOfTemplate</span> : <span class="title">RequiresDataSource</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> DefaultInvalidDataSourceView = <span class="string">"_InvalidDataSource"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> Guid _templateId;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RequiresDataSourceOfTemplate</span>(<span class="params">Guid templateId</span>)</span><br><span class="line">  </span>&#123;</span><br><span class="line">    _templateId = templateId;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span><br><span class="line">  </span>&#123;</span><br><span class="line">    <span class="keyword">base</span>.OnActionExecuting(filterContext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Only continue if we have a datasource, i.e. the base action didn't result in anything.</span></span><br><span class="line">    <span class="keyword">if</span> (DataSourceItem != <span class="keyword">null</span> &amp;&amp; !DataSourceItem.DerivesFromTemplate(_templateId))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> correctTemplateItem = Sitecore.Context.Database.GetItem(_templateId.ToID());</span><br><span class="line">      </span><br><span class="line">      filterContext.Result = <span class="keyword">new</span> PartialViewResult</span><br><span class="line">      &#123;</span><br><span class="line">        ViewData = &#123; </span><br><span class="line">          &#123;<span class="string">"RequiredTemplateName"</span>, correctTemplateItem.Name &#125;, </span><br><span class="line">          &#123;<span class="string">"FoundTemplateName"</span>, DataSourceItem.TemplateName&#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        ViewName = InvalidDataSourceView ?? DefaultInvalidDataSourceView</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> InvalidDataSourceView &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This time, as well as returning an alternate view, some additional metadata is pushed into the ViewData. That allows us to provde create a view that provides the user with a bit of information about what went wrong:</p>
<p><img src="/2014/11/13/a-requiresdatasource-filter-for-sitecore-controller-renderings/DS_Invalid.png" alt="Invalid DataSource example" title="Invalid DataSource example"></p>

<p>Once you have these attributes, you can decorate all of your actions that rely on DataSources with them. This will eliminate a lot of common code needing to be rewritten across these actions, so instead your actions can focus on just delivering the right content with the correct DataSources in place.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A common requirement when creating components in Sitecore is for the component to rely on data being supplied via the DataSource. Whilst you can try your best to ensure that a DataSource is associated with a component, there will inevitably be occasions when that DataSource gets deleted or moved and ultimately isn’t provided to the component at the time of rendering.<br>]]>
    
    </summary>
    
      <category term="sitecore" scheme="http://www.kasaku.co.uk/tags/sitecore/"/>
    
      <category term="sitecore-mvc" scheme="http://www.kasaku.co.uk/tags/sitecore-mvc/"/>
    
  </entry>
  
</feed>